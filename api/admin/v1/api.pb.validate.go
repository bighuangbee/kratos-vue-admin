// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetApiRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiRequestMultiError, or
// nil if none found.
func (m *GetApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetApiRequestMultiError(errors)
	}

	return nil
}

// GetApiRequestMultiError is an error wrapping multiple validation errors
// returned by GetApiRequest.ValidateAll() if the designated constraints
// aren't met.
type GetApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiRequestMultiError) AllErrors() []error { return m }

// GetApiRequestValidationError is the validation error returned by
// GetApiRequest.Validate if the designated constraints aren't met.
type GetApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiRequestValidationError) ErrorName() string { return "GetApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiRequestValidationError{}

// Validate checks the field values on GetApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiReplyMultiError, or
// nil if none found.
func (m *GetApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApiReplyValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApiReplyValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApiReplyValidationError{
				field:  "Api",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApiReplyMultiError(errors)
	}

	return nil
}

// GetApiReplyMultiError is an error wrapping multiple validation errors
// returned by GetApiReply.ValidateAll() if the designated constraints aren't met.
type GetApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiReplyMultiError) AllErrors() []error { return m }

// GetApiReplyValidationError is the validation error returned by
// GetApiReply.Validate if the designated constraints aren't met.
type GetApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiReplyValidationError) ErrorName() string { return "GetApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiReplyValidationError{}

// Validate checks the field values on ListApiRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListApiRequestMultiError,
// or nil if none found.
func (m *ListApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for Path

	// no validation rules for ApiGroup

	// no validation rules for Method

	// no validation rules for Description

	if len(errors) > 0 {
		return ListApiRequestMultiError(errors)
	}

	return nil
}

// ListApiRequestMultiError is an error wrapping multiple validation errors
// returned by ListApiRequest.ValidateAll() if the designated constraints
// aren't met.
type ListApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiRequestMultiError) AllErrors() []error { return m }

// ListApiRequestValidationError is the validation error returned by
// ListApiRequest.Validate if the designated constraints aren't met.
type ListApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiRequestValidationError) ErrorName() string { return "ListApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiRequestValidationError{}

// Validate checks the field values on ListApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListApiReplyMultiError, or
// nil if none found.
func (m *ListApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApiReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApiReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApiReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListApiReplyMultiError(errors)
	}

	return nil
}

// ListApiReplyMultiError is an error wrapping multiple validation errors
// returned by ListApiReply.ValidateAll() if the designated constraints aren't met.
type ListApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiReplyMultiError) AllErrors() []error { return m }

// ListApiReplyValidationError is the validation error returned by
// ListApiReply.Validate if the designated constraints aren't met.
type ListApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiReplyValidationError) ErrorName() string { return "ListApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiReplyValidationError{}

// Validate checks the field values on AllApiRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllApiRequestMultiError, or
// nil if none found.
func (m *AllApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllApiRequestMultiError(errors)
	}

	return nil
}

// AllApiRequestMultiError is an error wrapping multiple validation errors
// returned by AllApiRequest.ValidateAll() if the designated constraints
// aren't met.
type AllApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllApiRequestMultiError) AllErrors() []error { return m }

// AllApiRequestValidationError is the validation error returned by
// AllApiRequest.Validate if the designated constraints aren't met.
type AllApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllApiRequestValidationError) ErrorName() string { return "AllApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e AllApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllApiRequestValidationError{}

// Validate checks the field values on AllApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllApiReplyMultiError, or
// nil if none found.
func (m *AllApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllApiReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllApiReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllApiReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllApiReplyMultiError(errors)
	}

	return nil
}

// AllApiReplyMultiError is an error wrapping multiple validation errors
// returned by AllApiReply.ValidateAll() if the designated constraints aren't met.
type AllApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllApiReplyMultiError) AllErrors() []error { return m }

// AllApiReplyValidationError is the validation error returned by
// AllApiReply.Validate if the designated constraints aren't met.
type AllApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllApiReplyValidationError) ErrorName() string { return "AllApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllApiReplyValidationError{}

// Validate checks the field values on CreateApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApiRequestMultiError, or nil if none found.
func (m *CreateApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Description

	// no validation rules for ApiGroup

	// no validation rules for Method

	if len(errors) > 0 {
		return CreateApiRequestMultiError(errors)
	}

	return nil
}

// CreateApiRequestMultiError is an error wrapping multiple validation errors
// returned by CreateApiRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiRequestMultiError) AllErrors() []error { return m }

// CreateApiRequestValidationError is the validation error returned by
// CreateApiRequest.Validate if the designated constraints aren't met.
type CreateApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiRequestValidationError) ErrorName() string { return "CreateApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiRequestValidationError{}

// Validate checks the field values on CreateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReplyMultiError,
// or nil if none found.
func (m *CreateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateApiReplyMultiError(errors)
	}

	return nil
}

// CreateApiReplyMultiError is an error wrapping multiple validation errors
// returned by CreateApiReply.ValidateAll() if the designated constraints
// aren't met.
type CreateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReplyMultiError) AllErrors() []error { return m }

// CreateApiReplyValidationError is the validation error returned by
// CreateApiReply.Validate if the designated constraints aren't met.
type CreateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReplyValidationError) ErrorName() string { return "CreateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReplyValidationError{}

// Validate checks the field values on UpdateApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApiRequestMultiError, or nil if none found.
func (m *UpdateApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Path

	// no validation rules for Description

	// no validation rules for ApiGroup

	// no validation rules for Method

	if len(errors) > 0 {
		return UpdateApiRequestMultiError(errors)
	}

	return nil
}

// UpdateApiRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateApiRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiRequestMultiError) AllErrors() []error { return m }

// UpdateApiRequestValidationError is the validation error returned by
// UpdateApiRequest.Validate if the designated constraints aren't met.
type UpdateApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiRequestValidationError) ErrorName() string { return "UpdateApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiRequestValidationError{}

// Validate checks the field values on UpdateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReplyMultiError,
// or nil if none found.
func (m *UpdateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateApiReplyMultiError(errors)
	}

	return nil
}

// UpdateApiReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReplyMultiError) AllErrors() []error { return m }

// UpdateApiReplyValidationError is the validation error returned by
// UpdateApiReply.Validate if the designated constraints aren't met.
type UpdateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReplyValidationError) ErrorName() string { return "UpdateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReplyValidationError{}

// Validate checks the field values on DeleteApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApiRequestMultiError, or nil if none found.
func (m *DeleteApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteApiRequestMultiError(errors)
	}

	return nil
}

// DeleteApiRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteApiRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiRequestMultiError) AllErrors() []error { return m }

// DeleteApiRequestValidationError is the validation error returned by
// DeleteApiRequest.Validate if the designated constraints aren't met.
type DeleteApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiRequestValidationError) ErrorName() string { return "DeleteApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiRequestValidationError{}

// Validate checks the field values on DeleteApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReplyMultiError,
// or nil if none found.
func (m *DeleteApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApiReplyMultiError(errors)
	}

	return nil
}

// DeleteApiReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReplyMultiError) AllErrors() []error { return m }

// DeleteApiReplyValidationError is the validation error returned by
// DeleteApiReply.Validate if the designated constraints aren't met.
type DeleteApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReplyValidationError) ErrorName() string { return "DeleteApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReplyValidationError{}

// Validate checks the field values on GetPolicyPathByRoleKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyPathByRoleKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyPathByRoleKeyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPolicyPathByRoleKeyRequestMultiError, or nil if none found.
func (m *GetPolicyPathByRoleKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyPathByRoleKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleKey

	if len(errors) > 0 {
		return GetPolicyPathByRoleKeyRequestMultiError(errors)
	}

	return nil
}

// GetPolicyPathByRoleKeyRequestMultiError is an error wrapping multiple
// validation errors returned by GetPolicyPathByRoleKeyRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPolicyPathByRoleKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyPathByRoleKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyPathByRoleKeyRequestMultiError) AllErrors() []error { return m }

// GetPolicyPathByRoleKeyRequestValidationError is the validation error
// returned by GetPolicyPathByRoleKeyRequest.Validate if the designated
// constraints aren't met.
type GetPolicyPathByRoleKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyPathByRoleKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyPathByRoleKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyPathByRoleKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyPathByRoleKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyPathByRoleKeyRequestValidationError) ErrorName() string {
	return "GetPolicyPathByRoleKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyPathByRoleKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyPathByRoleKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyPathByRoleKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyPathByRoleKeyRequestValidationError{}

// Validate checks the field values on GetPolicyPathByRoleKeyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyPathByRoleKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyPathByRoleKeyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyPathByRoleKeyReplyMultiError, or nil if none found.
func (m *GetPolicyPathByRoleKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyPathByRoleKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApis() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPolicyPathByRoleKeyReplyValidationError{
						field:  fmt.Sprintf("Apis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPolicyPathByRoleKeyReplyValidationError{
						field:  fmt.Sprintf("Apis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPolicyPathByRoleKeyReplyValidationError{
					field:  fmt.Sprintf("Apis[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPolicyPathByRoleKeyReplyMultiError(errors)
	}

	return nil
}

// GetPolicyPathByRoleKeyReplyMultiError is an error wrapping multiple
// validation errors returned by GetPolicyPathByRoleKeyReply.ValidateAll() if
// the designated constraints aren't met.
type GetPolicyPathByRoleKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyPathByRoleKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyPathByRoleKeyReplyMultiError) AllErrors() []error { return m }

// GetPolicyPathByRoleKeyReplyValidationError is the validation error returned
// by GetPolicyPathByRoleKeyReply.Validate if the designated constraints
// aren't met.
type GetPolicyPathByRoleKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyPathByRoleKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyPathByRoleKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyPathByRoleKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyPathByRoleKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyPathByRoleKeyReplyValidationError) ErrorName() string {
	return "GetPolicyPathByRoleKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyPathByRoleKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyPathByRoleKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyPathByRoleKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyPathByRoleKeyReplyValidationError{}
