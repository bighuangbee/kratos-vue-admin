// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ApiHTTPServer interface {
	AllApi(context.Context, *AllApiRequest) (*AllApiReply, error)
	CreateApi(context.Context, *CreateApiRequest) (*CreateApiReply, error)
	DeleteApi(context.Context, *DeleteApiRequest) (*DeleteApiReply, error)
	GetApi(context.Context, *GetApiRequest) (*GetApiReply, error)
	GetPolicyPathByRoleKey(context.Context, *GetPolicyPathByRoleKeyRequest) (*GetPolicyPathByRoleKeyReply, error)
	ListApi(context.Context, *ListApiRequest) (*ListApiReply, error)
	UpdateApi(context.Context, *UpdateApiRequest) (*UpdateApiReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/system/api/list", _Api_ListApi0_HTTP_Handler(srv))
	r.GET("/system/api/all", _Api_AllApi0_HTTP_Handler(srv))
	r.POST("/system/api", _Api_CreateApi0_HTTP_Handler(srv))
	r.PUT("/system/api", _Api_UpdateApi0_HTTP_Handler(srv))
	r.GET("/system/api/getPolicyPathByRoleId", _Api_GetPolicyPathByRoleKey0_HTTP_Handler(srv))
	r.GET("/system/api/{id}", _Api_GetApi0_HTTP_Handler(srv))
	r.DELETE("/system/api/{id}", _Api_DeleteApi0_HTTP_Handler(srv))
}

func _Api_ListApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListApiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/ListApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListApi(ctx, req.(*ListApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_AllApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllApiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/AllApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AllApi(ctx, req.(*AllApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_CreateApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/CreateApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/UpdateApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApi(ctx, req.(*UpdateApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetPolicyPathByRoleKey0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPolicyPathByRoleKeyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/GetPolicyPathByRoleKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPolicyPathByRoleKey(ctx, req.(*GetPolicyPathByRoleKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPolicyPathByRoleKeyReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/GetApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApi(ctx, req.(*GetApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Api/DeleteApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApi(ctx, req.(*DeleteApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteApiReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	AllApi(ctx context.Context, req *AllApiRequest, opts ...http.CallOption) (rsp *AllApiReply, err error)
	CreateApi(ctx context.Context, req *CreateApiRequest, opts ...http.CallOption) (rsp *CreateApiReply, err error)
	DeleteApi(ctx context.Context, req *DeleteApiRequest, opts ...http.CallOption) (rsp *DeleteApiReply, err error)
	GetApi(ctx context.Context, req *GetApiRequest, opts ...http.CallOption) (rsp *GetApiReply, err error)
	GetPolicyPathByRoleKey(ctx context.Context, req *GetPolicyPathByRoleKeyRequest, opts ...http.CallOption) (rsp *GetPolicyPathByRoleKeyReply, err error)
	ListApi(ctx context.Context, req *ListApiRequest, opts ...http.CallOption) (rsp *ListApiReply, err error)
	UpdateApi(ctx context.Context, req *UpdateApiRequest, opts ...http.CallOption) (rsp *UpdateApiReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) AllApi(ctx context.Context, in *AllApiRequest, opts ...http.CallOption) (*AllApiReply, error) {
	var out AllApiReply
	pattern := "/system/api/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Api/AllApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiRequest, opts ...http.CallOption) (*CreateApiReply, error) {
	var out CreateApiReply
	pattern := "/system/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.Api/CreateApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteApi(ctx context.Context, in *DeleteApiRequest, opts ...http.CallOption) (*DeleteApiReply, error) {
	var out DeleteApiReply
	pattern := "/system/api/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Api/DeleteApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetApi(ctx context.Context, in *GetApiRequest, opts ...http.CallOption) (*GetApiReply, error) {
	var out GetApiReply
	pattern := "/system/api/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Api/GetApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetPolicyPathByRoleKey(ctx context.Context, in *GetPolicyPathByRoleKeyRequest, opts ...http.CallOption) (*GetPolicyPathByRoleKeyReply, error) {
	var out GetPolicyPathByRoleKeyReply
	pattern := "/system/api/getPolicyPathByRoleId"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Api/GetPolicyPathByRoleKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListApi(ctx context.Context, in *ListApiRequest, opts ...http.CallOption) (*ListApiReply, error) {
	var out ListApiReply
	pattern := "/system/api/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Api/ListApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateApi(ctx context.Context, in *UpdateApiRequest, opts ...http.CallOption) (*UpdateApiReply, error) {
	var out UpdateApiReply
	pattern := "/system/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.Api/UpdateApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
