// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: base.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *ApiBase) Reset() {
	*x = ApiBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiBase) ProtoMessage() {}

func (x *ApiBase) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiBase.ProtoReflect.Descriptor instead.
func (*ApiBase) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

func (x *ApiBase) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ApiBase) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type DeptTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeptId     int64                  `protobuf:"varint,1,opt,name=deptId,proto3" json:"deptId,omitempty"`
	ParentId   int64                  `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	DeptPath   string                 `protobuf:"bytes,4,opt,name=deptPath,proto3" json:"deptPath,omitempty"`
	DeptName   string                 `protobuf:"bytes,5,opt,name=deptName,proto3" json:"deptName,omitempty"`
	Sort       int32                  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Leader     string                 `protobuf:"bytes,7,opt,name=leader,proto3" json:"leader,omitempty"`
	Phone      string                 `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Email      string                 `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	Status     int32                  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy   string                 `protobuf:"bytes,11,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy   string                 `protobuf:"bytes,12,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	Children   []*DeptTree            `protobuf:"bytes,13,rep,name=children,proto3" json:"children,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *DeptTree) Reset() {
	*x = DeptTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptTree) ProtoMessage() {}

func (x *DeptTree) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptTree.ProtoReflect.Descriptor instead.
func (*DeptTree) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

func (x *DeptTree) GetDeptId() int64 {
	if x != nil {
		return x.DeptId
	}
	return 0
}

func (x *DeptTree) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *DeptTree) GetDeptPath() string {
	if x != nil {
		return x.DeptPath
	}
	return ""
}

func (x *DeptTree) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *DeptTree) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DeptTree) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *DeptTree) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *DeptTree) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DeptTree) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeptTree) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *DeptTree) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *DeptTree) GetChildren() []*DeptTree {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DeptTree) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeptTree) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type RoleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId     int64                  `protobuf:"varint,1,opt,name=roleId,proto3" json:"roleId,omitempty"`
	RoleName   string                 `protobuf:"bytes,2,opt,name=roleName,proto3" json:"roleName,omitempty"`
	Status     int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	RoleKey    string                 `protobuf:"bytes,4,opt,name=roleKey,proto3" json:"roleKey,omitempty"`
	RoleSort   int32                  `protobuf:"varint,5,opt,name=roleSort,proto3" json:"roleSort,omitempty"`
	DataScope  int64                  `protobuf:"varint,6,opt,name=dataScope,proto3" json:"dataScope,omitempty"`
	CreateBy   string                 `protobuf:"bytes,7,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy   string                 `protobuf:"bytes,8,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	Remark     string                 `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	MenuIds    []int32                `protobuf:"varint,10,rep,packed,name=menuIds,proto3" json:"menuIds,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *RoleData) Reset() {
	*x = RoleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleData) ProtoMessage() {}

func (x *RoleData) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleData.ProtoReflect.Descriptor instead.
func (*RoleData) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

func (x *RoleData) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleData) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *RoleData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoleData) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

func (x *RoleData) GetRoleSort() int32 {
	if x != nil {
		return x.RoleSort
	}
	return 0
}

func (x *RoleData) GetDataScope() int64 {
	if x != nil {
		return x.DataScope
	}
	return 0
}

func (x *RoleData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *RoleData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *RoleData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RoleData) GetMenuIds() []int32 {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

func (x *RoleData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RoleData) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type ApiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path        string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ApiGroup    string                 `protobuf:"bytes,4,opt,name=apiGroup,proto3" json:"apiGroup,omitempty"`
	Method      string                 `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *ApiData) Reset() {
	*x = ApiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiData) ProtoMessage() {}

func (x *ApiData) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiData.ProtoReflect.Descriptor instead.
func (*ApiData) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

func (x *ApiData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ApiData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApiData) GetApiGroup() string {
	if x != nil {
		return x.ApiGroup
	}
	return ""
}

func (x *ApiData) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ApiData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApiData) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type MenuTreeAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path      string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Redirect  string          `protobuf:"bytes,3,opt,name=redirect,proto3" json:"redirect,omitempty"`
	Component string          `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	Meta      *MenuTreeMeta   `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	Children  []*MenuTreeAuth `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	ParentId  int64           `protobuf:"varint,7,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *MenuTreeAuth) Reset() {
	*x = MenuTreeAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuTreeAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuTreeAuth) ProtoMessage() {}

func (x *MenuTreeAuth) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuTreeAuth.ProtoReflect.Descriptor instead.
func (*MenuTreeAuth) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

func (x *MenuTreeAuth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MenuTreeAuth) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MenuTreeAuth) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

func (x *MenuTreeAuth) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *MenuTreeAuth) GetMeta() *MenuTreeMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MenuTreeAuth) GetChildren() []*MenuTreeAuth {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *MenuTreeAuth) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type MenuTreeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	IsLink      bool     `protobuf:"varint,2,opt,name=isLink,proto3" json:"isLink,omitempty"`
	IsHide      bool     `protobuf:"varint,3,opt,name=isHide,proto3" json:"isHide,omitempty"`
	IsKeepAlive bool     `protobuf:"varint,4,opt,name=isKeepAlive,proto3" json:"isKeepAlive,omitempty"`
	IsAffix     bool     `protobuf:"varint,5,opt,name=isAffix,proto3" json:"isAffix,omitempty"`
	IsIframe    bool     `protobuf:"varint,6,opt,name=isIframe,proto3" json:"isIframe,omitempty"`
	Auth        []string `protobuf:"bytes,7,rep,name=auth,proto3" json:"auth,omitempty"`
	Icon        string   `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *MenuTreeMeta) Reset() {
	*x = MenuTreeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuTreeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuTreeMeta) ProtoMessage() {}

func (x *MenuTreeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuTreeMeta.ProtoReflect.Descriptor instead.
func (*MenuTreeMeta) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{5}
}

func (x *MenuTreeMeta) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MenuTreeMeta) GetIsLink() bool {
	if x != nil {
		return x.IsLink
	}
	return false
}

func (x *MenuTreeMeta) GetIsHide() bool {
	if x != nil {
		return x.IsHide
	}
	return false
}

func (x *MenuTreeMeta) GetIsKeepAlive() bool {
	if x != nil {
		return x.IsKeepAlive
	}
	return false
}

func (x *MenuTreeMeta) GetIsAffix() bool {
	if x != nil {
		return x.IsAffix
	}
	return false
}

func (x *MenuTreeMeta) GetIsIframe() bool {
	if x != nil {
		return x.IsIframe
	}
	return false
}

func (x *MenuTreeMeta) GetAuth() []string {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *MenuTreeMeta) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type MenuTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuId      int64                  `protobuf:"varint,1,opt,name=menuId,proto3" json:"menuId,omitempty"`
	MenuName    string                 `protobuf:"bytes,2,opt,name=menuName,proto3" json:"menuName,omitempty"`
	Title       string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ParentId    int64                  `protobuf:"varint,4,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Sort        int32                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Icon        string                 `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Path        string                 `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	Component   string                 `protobuf:"bytes,8,opt,name=component,proto3" json:"component,omitempty"`
	IsIframe    int32                  `protobuf:"varint,9,opt,name=isIframe,proto3" json:"isIframe,omitempty"`
	IsLink      string                 `protobuf:"bytes,10,opt,name=isLink,proto3" json:"isLink,omitempty"`
	MenuType    string                 `protobuf:"bytes,11,opt,name=menuType,proto3" json:"menuType,omitempty"`
	IsHide      int32                  `protobuf:"varint,12,opt,name=isHide,proto3" json:"isHide,omitempty"`
	IsKeepAlive int32                  `protobuf:"varint,13,opt,name=isKeepAlive,proto3" json:"isKeepAlive,omitempty"`
	IsAffix     int32                  `protobuf:"varint,14,opt,name=isAffix,proto3" json:"isAffix,omitempty"`
	Permission  string                 `protobuf:"bytes,15,opt,name=permission,proto3" json:"permission,omitempty"`
	Status      int32                  `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy    string                 `protobuf:"bytes,17,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy    string                 `protobuf:"bytes,18,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	Remark      string                 `protobuf:"bytes,19,opt,name=remark,proto3" json:"remark,omitempty"`
	Children    []*MenuTree            `protobuf:"bytes,20,rep,name=children,proto3" json:"children,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *MenuTree) Reset() {
	*x = MenuTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuTree) ProtoMessage() {}

func (x *MenuTree) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuTree.ProtoReflect.Descriptor instead.
func (*MenuTree) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{6}
}

func (x *MenuTree) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuTree) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *MenuTree) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MenuTree) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MenuTree) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MenuTree) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MenuTree) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MenuTree) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *MenuTree) GetIsIframe() int32 {
	if x != nil {
		return x.IsIframe
	}
	return 0
}

func (x *MenuTree) GetIsLink() string {
	if x != nil {
		return x.IsLink
	}
	return ""
}

func (x *MenuTree) GetMenuType() string {
	if x != nil {
		return x.MenuType
	}
	return ""
}

func (x *MenuTree) GetIsHide() int32 {
	if x != nil {
		return x.IsHide
	}
	return 0
}

func (x *MenuTree) GetIsKeepAlive() int32 {
	if x != nil {
		return x.IsKeepAlive
	}
	return 0
}

func (x *MenuTree) GetIsAffix() int32 {
	if x != nil {
		return x.IsAffix
	}
	return 0
}

func (x *MenuTree) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *MenuTree) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MenuTree) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *MenuTree) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *MenuTree) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *MenuTree) GetChildren() []*MenuTree {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *MenuTree) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *MenuTree) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type SimpleMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuId   int64         `protobuf:"varint,1,opt,name=menuId,proto3" json:"menuId,omitempty"`
	MenuName string        `protobuf:"bytes,2,opt,name=menuName,proto3" json:"menuName,omitempty"`
	Children []*SimpleMenu `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *SimpleMenu) Reset() {
	*x = SimpleMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMenu) ProtoMessage() {}

func (x *SimpleMenu) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMenu.ProtoReflect.Descriptor instead.
func (*SimpleMenu) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{7}
}

func (x *SimpleMenu) GetMenuId() int64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *SimpleMenu) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *SimpleMenu) GetChildren() []*SimpleMenu {
	if x != nil {
		return x.Children
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName   string                 `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Phone      string                 `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	RoleId     int32                  `protobuf:"varint,5,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Salt       string                 `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Avatar     string                 `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Sex        int64                  `protobuf:"varint,8,opt,name=sex,proto3" json:"sex,omitempty"`
	Email      string                 `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	DeptId     int32                  `protobuf:"varint,10,opt,name=deptId,proto3" json:"deptId,omitempty"`
	PostId     int32                  `protobuf:"varint,11,opt,name=postId,proto3" json:"postId,omitempty"`
	RoleIds    string                 `protobuf:"bytes,12,opt,name=roleIds,proto3" json:"roleIds,omitempty"`
	PostIds    string                 `protobuf:"bytes,13,opt,name=postIds,proto3" json:"postIds,omitempty"`
	CreateBy   string                 `protobuf:"bytes,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy   string                 `protobuf:"bytes,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	Remark     string                 `protobuf:"bytes,16,opt,name=remark,proto3" json:"remark,omitempty"`
	Status     int32                  `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	Username   string                 `protobuf:"bytes,18,opt,name=username,proto3" json:"username,omitempty"`
	Password   string                 `protobuf:"bytes,19,opt,name=password,proto3" json:"password,omitempty"`
	RoleName   string                 `protobuf:"bytes,20,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	DeptName   string                 `protobuf:"bytes,21,opt,name=dept_name,json=deptName,proto3" json:"dept_name,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Secret     string                 `protobuf:"bytes,24,opt,name=secret,proto3" json:"secret,omitempty"`
	Qrcode     string                 `protobuf:"bytes,25,opt,name=qrcode,proto3" json:"qrcode,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{8}
}

func (x *UserData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserData) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserData) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserData) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UserData) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *UserData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserData) GetSex() int64 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserData) GetDeptId() int32 {
	if x != nil {
		return x.DeptId
	}
	return 0
}

func (x *UserData) GetPostId() int32 {
	if x != nil {
		return x.PostId
	}
	return 0
}

func (x *UserData) GetRoleIds() string {
	if x != nil {
		return x.RoleIds
	}
	return ""
}

func (x *UserData) GetPostIds() string {
	if x != nil {
		return x.PostIds
	}
	return ""
}

func (x *UserData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *UserData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UserData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserData) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *UserData) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *UserData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserData) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UserData) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UserData) GetQrcode() string {
	if x != nil {
		return x.Qrcode
	}
	return ""
}

type PostData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId     int64                  `protobuf:"varint,1,opt,name=postId,proto3" json:"postId,omitempty"`
	PostName   string                 `protobuf:"bytes,3,opt,name=postName,proto3" json:"postName,omitempty"`
	PostCode   string                 `protobuf:"bytes,4,opt,name=postCode,proto3" json:"postCode,omitempty"`
	Sort       int32                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Status     int32                  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Remark     string                 `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateBy   string                 `protobuf:"bytes,8,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy   string                 `protobuf:"bytes,9,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *PostData) Reset() {
	*x = PostData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostData) ProtoMessage() {}

func (x *PostData) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostData.ProtoReflect.Descriptor instead.
func (*PostData) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{9}
}

func (x *PostData) GetPostId() int64 {
	if x != nil {
		return x.PostId
	}
	return 0
}

func (x *PostData) GetPostName() string {
	if x != nil {
		return x.PostName
	}
	return ""
}

func (x *PostData) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *PostData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *PostData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PostData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PostData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *PostData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *PostData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PostData) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type DeptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children   []*DeptData            `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	DeptId     int64                  `protobuf:"varint,2,opt,name=deptId,proto3" json:"deptId,omitempty"`
	DeptName   string                 `protobuf:"bytes,3,opt,name=deptName,proto3" json:"deptName,omitempty"`
	DeptPath   string                 `protobuf:"bytes,4,opt,name=deptPath,proto3" json:"deptPath,omitempty"`
	Email      string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Leader     string                 `protobuf:"bytes,6,opt,name=leader,proto3" json:"leader,omitempty"`
	ParentId   int64                  `protobuf:"varint,7,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Phone      string                 `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Short      int32                  `protobuf:"varint,9,opt,name=short,proto3" json:"short,omitempty"`
	Status     int32                  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy   string                 `protobuf:"bytes,11,opt,name=createBy,proto3" json:"createBy,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *DeptData) Reset() {
	*x = DeptData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeptData) ProtoMessage() {}

func (x *DeptData) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeptData.ProtoReflect.Descriptor instead.
func (*DeptData) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{10}
}

func (x *DeptData) GetChildren() []*DeptData {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DeptData) GetDeptId() int64 {
	if x != nil {
		return x.DeptId
	}
	return 0
}

func (x *DeptData) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *DeptData) GetDeptPath() string {
	if x != nil {
		return x.DeptPath
	}
	return ""
}

func (x *DeptData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DeptData) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *DeptData) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *DeptData) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *DeptData) GetShort() int32 {
	if x != nil {
		return x.Short
	}
	return 0
}

func (x *DeptData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeptData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *DeptData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeptData) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 敏感词信息
type SensitiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Word      string                 `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Status    int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *SensitiveInfo) Reset() {
	*x = SensitiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensitiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensitiveInfo) ProtoMessage() {}

func (x *SensitiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensitiveInfo.ProtoReflect.Descriptor instead.
func (*SensitiveInfo) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{11}
}

func (x *SensitiveInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SensitiveInfo) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *SensitiveInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SensitiveInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           string                      `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname         string                      `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL          string                      `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Gender           int32                       `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	PhoneNumber      string                      `protobuf:"bytes,5,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Email            string                      `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Motto            string                      `protobuf:"bytes,8,opt,name=motto,proto3" json:"motto,omitempty"`
	Platform         uint32                      `protobuf:"varint,9,opt,name=platform,proto3" json:"platform,omitempty"`
	Birth            *timestamppb.Timestamp      `protobuf:"bytes,10,opt,name=birth,proto3" json:"birth,omitempty"`
	CreateTime       *timestamppb.Timestamp      `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Account          string                      `protobuf:"bytes,12,opt,name=account,proto3" json:"account,omitempty"`
	Level            int32                       `protobuf:"varint,13,opt,name=level,proto3" json:"level,omitempty"`
	LastLoginIp      string                      `protobuf:"bytes,14,opt,name=lastLoginIp,proto3" json:"lastLoginIp,omitempty"`
	FriendCount      int32                       `protobuf:"varint,15,opt,name=friendCount,proto3" json:"friendCount,omitempty"`
	GroupCount       int32                       `protobuf:"varint,16,opt,name=groupCount,proto3" json:"groupCount,omitempty"`
	Status           int32                       `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	LastLoginTime    *timestamppb.Timestamp      `protobuf:"bytes,18,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`
	FunctionStatus   *UserInfoFunctionStatusList `protobuf:"bytes,20,opt,name=functionStatus,proto3" json:"functionStatus,omitempty"`
	IpList           *UserInfoIpItemSet          `protobuf:"bytes,21,opt,name=ipList,proto3" json:"ipList,omitempty"`
	AllowAddFriend   int32                       `protobuf:"varint,22,opt,name=allowAddFriend,proto3" json:"allowAddFriend,omitempty"`
	AllowCreateGroup int32                       `protobuf:"varint,23,opt,name=allowCreateGroup,proto3" json:"allowCreateGroup,omitempty"`
	GroupMute        int32                       `protobuf:"varint,24,opt,name=groupMute,proto3" json:"groupMute,omitempty"`
	FriendMute       int32                       `protobuf:"varint,25,opt,name=friendMute,proto3" json:"friendMute,omitempty"`
	IsInIpWhiteList  int32                       `protobuf:"varint,26,opt,name=isInIpWhiteList,proto3" json:"isInIpWhiteList,omitempty"`
	FreezeAt         *timestamppb.Timestamp      `protobuf:"bytes,27,opt,name=freezeAt,proto3" json:"freezeAt,omitempty"`
	FreezeBy         string                      `protobuf:"bytes,28,opt,name=freezeBy,proto3" json:"freezeBy,omitempty"`
	FreezeRemark     string                      `protobuf:"bytes,29,opt,name=freezeRemark,proto3" json:"freezeRemark,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12}
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *UserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetMotto() string {
	if x != nil {
		return x.Motto
	}
	return ""
}

func (x *UserInfo) GetPlatform() uint32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *UserInfo) GetBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.Birth
	}
	return nil
}

func (x *UserInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserInfo) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *UserInfo) GetFriendCount() int32 {
	if x != nil {
		return x.FriendCount
	}
	return 0
}

func (x *UserInfo) GetGroupCount() int32 {
	if x != nil {
		return x.GroupCount
	}
	return 0
}

func (x *UserInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfo) GetLastLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginTime
	}
	return nil
}

func (x *UserInfo) GetFunctionStatus() *UserInfoFunctionStatusList {
	if x != nil {
		return x.FunctionStatus
	}
	return nil
}

func (x *UserInfo) GetIpList() *UserInfoIpItemSet {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *UserInfo) GetAllowAddFriend() int32 {
	if x != nil {
		return x.AllowAddFriend
	}
	return 0
}

func (x *UserInfo) GetAllowCreateGroup() int32 {
	if x != nil {
		return x.AllowCreateGroup
	}
	return 0
}

func (x *UserInfo) GetGroupMute() int32 {
	if x != nil {
		return x.GroupMute
	}
	return 0
}

func (x *UserInfo) GetFriendMute() int32 {
	if x != nil {
		return x.FriendMute
	}
	return 0
}

func (x *UserInfo) GetIsInIpWhiteList() int32 {
	if x != nil {
		return x.IsInIpWhiteList
	}
	return 0
}

func (x *UserInfo) GetFreezeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FreezeAt
	}
	return nil
}

func (x *UserInfo) GetFreezeBy() string {
	if x != nil {
		return x.FreezeBy
	}
	return ""
}

func (x *UserInfo) GetFreezeRemark() string {
	if x != nil {
		return x.FreezeRemark
	}
	return ""
}

type UserInfoFunctionStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupMute     int32 `protobuf:"varint,1,opt,name=groupMute,proto3" json:"groupMute,omitempty"`         //群组禁言
	FriendMute    int32 `protobuf:"varint,2,opt,name=friendMute,proto3" json:"friendMute,omitempty"`       //私聊禁言
	CreateGroup   int32 `protobuf:"varint,3,opt,name=createGroup,proto3" json:"createGroup,omitempty"`     //禁止创建群聊
	AddFriend     int32 `protobuf:"varint,4,opt,name=addFriend,proto3" json:"addFriend,omitempty"`         //禁止添加好友
	FreezeAccount int32 `protobuf:"varint,5,opt,name=freezeAccount,proto3" json:"freezeAccount,omitempty"` //冻结帐户
}

func (x *UserInfoFunctionStatusList) Reset() {
	*x = UserInfoFunctionStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoFunctionStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoFunctionStatusList) ProtoMessage() {}

func (x *UserInfoFunctionStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoFunctionStatusList.ProtoReflect.Descriptor instead.
func (*UserInfoFunctionStatusList) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UserInfoFunctionStatusList) GetGroupMute() int32 {
	if x != nil {
		return x.GroupMute
	}
	return 0
}

func (x *UserInfoFunctionStatusList) GetFriendMute() int32 {
	if x != nil {
		return x.FriendMute
	}
	return 0
}

func (x *UserInfoFunctionStatusList) GetCreateGroup() int32 {
	if x != nil {
		return x.CreateGroup
	}
	return 0
}

func (x *UserInfoFunctionStatusList) GetAddFriend() int32 {
	if x != nil {
		return x.AddFriend
	}
	return 0
}

func (x *UserInfoFunctionStatusList) GetFreezeAccount() int32 {
	if x != nil {
		return x.FreezeAccount
	}
	return 0
}

type UserInfoIpItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                      //ip
	IsProhibited int32  `protobuf:"varint,2,opt,name=isProhibited,proto3" json:"isProhibited,omitempty"` //是否已封禁
}

func (x *UserInfoIpItem) Reset() {
	*x = UserInfoIpItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoIpItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoIpItem) ProtoMessage() {}

func (x *UserInfoIpItem) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoIpItem.ProtoReflect.Descriptor instead.
func (*UserInfoIpItem) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12, 1}
}

func (x *UserInfoIpItem) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserInfoIpItem) GetIsProhibited() int32 {
	if x != nil {
		return x.IsProhibited
	}
	return 0
}

type UserInfoIpItemSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpItem               []*UserInfoIpItem `protobuf:"bytes,1,rep,name=ipItem,proto3" json:"ipItem,omitempty"`
	IsMultiTerminalLogin int32             `protobuf:"varint,2,opt,name=isMultiTerminalLogin,proto3" json:"isMultiTerminalLogin,omitempty"` //是否多端登录
}

func (x *UserInfoIpItemSet) Reset() {
	*x = UserInfoIpItemSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoIpItemSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoIpItemSet) ProtoMessage() {}

func (x *UserInfoIpItemSet) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoIpItemSet.ProtoReflect.Descriptor instead.
func (*UserInfoIpItemSet) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{12, 2}
}

func (x *UserInfoIpItemSet) GetIpItem() []*UserInfoIpItem {
	if x != nil {
		return x.IpItem
	}
	return nil
}

func (x *UserInfoIpItemSet) GetIsMultiTerminalLogin() int32 {
	if x != nil {
		return x.IsMultiTerminalLogin
	}
	return 0
}

var File_base_proto protoreflect.FileDescriptor

var file_base_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x07, 0x41,
	0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0xca, 0x03, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8c, 0x03, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x65, 0x6e, 0x75, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb,
	0x01, 0x0a, 0x07, 0x41, 0x70, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a,
	0x0c, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e,
	0x75, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa2, 0x05, 0x0a, 0x08, 0x4d,
	0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x49, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x76, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xa6, 0x05, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x73, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x70, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xce, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb0, 0x03, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe8, 0x0a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x74, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x74, 0x74, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x62, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x75, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x75,
	0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4d, 0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x49, 0x70, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69,
	0x73, 0x49, 0x6e, 0x49, 0x70, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x42, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x42, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0xb8, 0x01, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x3c, 0x0a, 0x06, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x1a,
	0x76, 0x0a, 0x09, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x19, 0x5a, 0x17, 0x66, 0x65, 0x6e, 0x67, 0x79,
	0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_proto_rawDescOnce sync.Once
	file_base_proto_rawDescData = file_base_proto_rawDesc
)

func file_base_proto_rawDescGZIP() []byte {
	file_base_proto_rawDescOnce.Do(func() {
		file_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_proto_rawDescData)
	})
	return file_base_proto_rawDescData
}

var file_base_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_base_proto_goTypes = []interface{}{
	(*ApiBase)(nil),                    // 0: api.admin.v1.ApiBase
	(*DeptTree)(nil),                   // 1: api.admin.v1.DeptTree
	(*RoleData)(nil),                   // 2: api.admin.v1.RoleData
	(*ApiData)(nil),                    // 3: api.admin.v1.ApiData
	(*MenuTreeAuth)(nil),               // 4: api.admin.v1.MenuTreeAuth
	(*MenuTreeMeta)(nil),               // 5: api.admin.v1.MenuTreeMeta
	(*MenuTree)(nil),                   // 6: api.admin.v1.MenuTree
	(*SimpleMenu)(nil),                 // 7: api.admin.v1.SimpleMenu
	(*UserData)(nil),                   // 8: api.admin.v1.UserData
	(*PostData)(nil),                   // 9: api.admin.v1.PostData
	(*DeptData)(nil),                   // 10: api.admin.v1.DeptData
	(*SensitiveInfo)(nil),              // 11: api.admin.v1.SensitiveInfo
	(*UserInfo)(nil),                   // 12: api.admin.v1.UserInfo
	(*UserInfoFunctionStatusList)(nil), // 13: api.admin.v1.UserInfo.functionStatusList
	(*UserInfoIpItem)(nil),             // 14: api.admin.v1.UserInfo.ipItem
	(*UserInfoIpItemSet)(nil),          // 15: api.admin.v1.UserInfo.ipItemSet
	(*timestamppb.Timestamp)(nil),      // 16: google.protobuf.Timestamp
}
var file_base_proto_depIdxs = []int32{
	1,  // 0: api.admin.v1.DeptTree.children:type_name -> api.admin.v1.DeptTree
	16, // 1: api.admin.v1.DeptTree.createTime:type_name -> google.protobuf.Timestamp
	16, // 2: api.admin.v1.DeptTree.updateTime:type_name -> google.protobuf.Timestamp
	16, // 3: api.admin.v1.RoleData.createTime:type_name -> google.protobuf.Timestamp
	16, // 4: api.admin.v1.RoleData.updateTime:type_name -> google.protobuf.Timestamp
	16, // 5: api.admin.v1.ApiData.createTime:type_name -> google.protobuf.Timestamp
	16, // 6: api.admin.v1.ApiData.updateTime:type_name -> google.protobuf.Timestamp
	5,  // 7: api.admin.v1.MenuTreeAuth.meta:type_name -> api.admin.v1.MenuTreeMeta
	4,  // 8: api.admin.v1.MenuTreeAuth.children:type_name -> api.admin.v1.MenuTreeAuth
	6,  // 9: api.admin.v1.MenuTree.children:type_name -> api.admin.v1.MenuTree
	16, // 10: api.admin.v1.MenuTree.createTime:type_name -> google.protobuf.Timestamp
	16, // 11: api.admin.v1.MenuTree.updateTime:type_name -> google.protobuf.Timestamp
	7,  // 12: api.admin.v1.SimpleMenu.children:type_name -> api.admin.v1.SimpleMenu
	16, // 13: api.admin.v1.UserData.createTime:type_name -> google.protobuf.Timestamp
	16, // 14: api.admin.v1.UserData.updateTime:type_name -> google.protobuf.Timestamp
	16, // 15: api.admin.v1.PostData.createTime:type_name -> google.protobuf.Timestamp
	16, // 16: api.admin.v1.PostData.updateTime:type_name -> google.protobuf.Timestamp
	10, // 17: api.admin.v1.DeptData.children:type_name -> api.admin.v1.DeptData
	16, // 18: api.admin.v1.DeptData.createTime:type_name -> google.protobuf.Timestamp
	16, // 19: api.admin.v1.DeptData.updateTime:type_name -> google.protobuf.Timestamp
	16, // 20: api.admin.v1.SensitiveInfo.createdAt:type_name -> google.protobuf.Timestamp
	16, // 21: api.admin.v1.UserInfo.birth:type_name -> google.protobuf.Timestamp
	16, // 22: api.admin.v1.UserInfo.createTime:type_name -> google.protobuf.Timestamp
	16, // 23: api.admin.v1.UserInfo.lastLoginTime:type_name -> google.protobuf.Timestamp
	13, // 24: api.admin.v1.UserInfo.functionStatus:type_name -> api.admin.v1.UserInfo.functionStatusList
	15, // 25: api.admin.v1.UserInfo.ipList:type_name -> api.admin.v1.UserInfo.ipItemSet
	16, // 26: api.admin.v1.UserInfo.freezeAt:type_name -> google.protobuf.Timestamp
	14, // 27: api.admin.v1.UserInfo.ipItemSet.ipItem:type_name -> api.admin.v1.UserInfo.ipItem
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_base_proto_init() }
func file_base_proto_init() {
	if File_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuTreeAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuTreeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeptData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensitiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoFunctionStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoIpItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoIpItemSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_proto_goTypes,
		DependencyIndexes: file_base_proto_depIdxs,
		MessageInfos:      file_base_proto_msgTypes,
	}.Build()
	File_base_proto = out.File
	file_base_proto_rawDesc = nil
	file_base_proto_goTypes = nil
	file_base_proto_depIdxs = nil
}
