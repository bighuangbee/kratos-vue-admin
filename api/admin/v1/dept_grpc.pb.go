// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: dept.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dept_ListDept_FullMethodName           = "/api.admin.v1.Dept/ListDept"
	Dept_GetDeptTree_FullMethodName        = "/api.admin.v1.Dept/GetDeptTree"
	Dept_CreateDept_FullMethodName         = "/api.admin.v1.Dept/CreateDept"
	Dept_UpdateDept_FullMethodName         = "/api.admin.v1.Dept/UpdateDept"
	Dept_DeleteDept_FullMethodName         = "/api.admin.v1.Dept/DeleteDept"
	Dept_RoleDeptTreeSelect_FullMethodName = "/api.admin.v1.Dept/RoleDeptTreeSelect"
)

// DeptClient is the client API for Dept service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeptClient interface {
	// 部门列表
	ListDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptReply, error)
	// 获取部门关系结构
	GetDeptTree(ctx context.Context, in *GetDeptTreeRequest, opts ...grpc.CallOption) (*GetDeptTreeReply, error)
	// 创建部门
	CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...grpc.CallOption) (*CreateDeptReply, error)
	// 更新部门
	UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...grpc.CallOption) (*UpdateDeptReply, error)
	// 删除部门
	DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...grpc.CallOption) (*DeleteDeptReply, error)
	// 获取角色部门树
	RoleDeptTreeSelect(ctx context.Context, in *RoleDeptTreeSelectRequest, opts ...grpc.CallOption) (*RoleDeptTreeSelectReply, error)
}

type deptClient struct {
	cc grpc.ClientConnInterface
}

func NewDeptClient(cc grpc.ClientConnInterface) DeptClient {
	return &deptClient{cc}
}

func (c *deptClient) ListDept(ctx context.Context, in *ListDeptRequest, opts ...grpc.CallOption) (*ListDeptReply, error) {
	out := new(ListDeptReply)
	err := c.cc.Invoke(ctx, Dept_ListDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) GetDeptTree(ctx context.Context, in *GetDeptTreeRequest, opts ...grpc.CallOption) (*GetDeptTreeReply, error) {
	out := new(GetDeptTreeReply)
	err := c.cc.Invoke(ctx, Dept_GetDeptTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...grpc.CallOption) (*CreateDeptReply, error) {
	out := new(CreateDeptReply)
	err := c.cc.Invoke(ctx, Dept_CreateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...grpc.CallOption) (*UpdateDeptReply, error) {
	out := new(UpdateDeptReply)
	err := c.cc.Invoke(ctx, Dept_UpdateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...grpc.CallOption) (*DeleteDeptReply, error) {
	out := new(DeleteDeptReply)
	err := c.cc.Invoke(ctx, Dept_DeleteDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptClient) RoleDeptTreeSelect(ctx context.Context, in *RoleDeptTreeSelectRequest, opts ...grpc.CallOption) (*RoleDeptTreeSelectReply, error) {
	out := new(RoleDeptTreeSelectReply)
	err := c.cc.Invoke(ctx, Dept_RoleDeptTreeSelect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeptServer is the server API for Dept service.
// All implementations must embed UnimplementedDeptServer
// for forward compatibility
type DeptServer interface {
	// 部门列表
	ListDept(context.Context, *ListDeptRequest) (*ListDeptReply, error)
	// 获取部门关系结构
	GetDeptTree(context.Context, *GetDeptTreeRequest) (*GetDeptTreeReply, error)
	// 创建部门
	CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptReply, error)
	// 更新部门
	UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptReply, error)
	// 删除部门
	DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptReply, error)
	// 获取角色部门树
	RoleDeptTreeSelect(context.Context, *RoleDeptTreeSelectRequest) (*RoleDeptTreeSelectReply, error)
	mustEmbedUnimplementedDeptServer()
}

// UnimplementedDeptServer must be embedded to have forward compatible implementations.
type UnimplementedDeptServer struct {
}

func (UnimplementedDeptServer) ListDept(context.Context, *ListDeptRequest) (*ListDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDept not implemented")
}
func (UnimplementedDeptServer) GetDeptTree(context.Context, *GetDeptTreeRequest) (*GetDeptTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeptTree not implemented")
}
func (UnimplementedDeptServer) CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDept not implemented")
}
func (UnimplementedDeptServer) UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}
func (UnimplementedDeptServer) DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDept not implemented")
}
func (UnimplementedDeptServer) RoleDeptTreeSelect(context.Context, *RoleDeptTreeSelectRequest) (*RoleDeptTreeSelectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDeptTreeSelect not implemented")
}
func (UnimplementedDeptServer) mustEmbedUnimplementedDeptServer() {}

// UnsafeDeptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeptServer will
// result in compilation errors.
type UnsafeDeptServer interface {
	mustEmbedUnimplementedDeptServer()
}

func RegisterDeptServer(s grpc.ServiceRegistrar, srv DeptServer) {
	s.RegisterService(&Dept_ServiceDesc, srv)
}

func _Dept_ListDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).ListDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_ListDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).ListDept(ctx, req.(*ListDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_GetDeptTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).GetDeptTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_GetDeptTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).GetDeptTree(ctx, req.(*GetDeptTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_CreateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).CreateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_CreateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).CreateDept(ctx, req.(*CreateDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_UpdateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).UpdateDept(ctx, req.(*UpdateDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_DeleteDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).DeleteDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_DeleteDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).DeleteDept(ctx, req.(*DeleteDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dept_RoleDeptTreeSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeptTreeSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServer).RoleDeptTreeSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dept_RoleDeptTreeSelect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServer).RoleDeptTreeSelect(ctx, req.(*RoleDeptTreeSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dept_ServiceDesc is the grpc.ServiceDesc for Dept service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dept_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.Dept",
	HandlerType: (*DeptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDept",
			Handler:    _Dept_ListDept_Handler,
		},
		{
			MethodName: "GetDeptTree",
			Handler:    _Dept_GetDeptTree_Handler,
		},
		{
			MethodName: "CreateDept",
			Handler:    _Dept_CreateDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _Dept_UpdateDept_Handler,
		},
		{
			MethodName: "DeleteDept",
			Handler:    _Dept_DeleteDept_Handler,
		},
		{
			MethodName: "RoleDeptTreeSelect",
			Handler:    _Dept_RoleDeptTreeSelect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dept.proto",
}
