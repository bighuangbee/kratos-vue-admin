// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: dept.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeptCreateDept = "/api.admin.v1.Dept/CreateDept"
const OperationDeptDeleteDept = "/api.admin.v1.Dept/DeleteDept"
const OperationDeptGetDeptTree = "/api.admin.v1.Dept/GetDeptTree"
const OperationDeptListDept = "/api.admin.v1.Dept/ListDept"
const OperationDeptRoleDeptTreeSelect = "/api.admin.v1.Dept/RoleDeptTreeSelect"
const OperationDeptUpdateDept = "/api.admin.v1.Dept/UpdateDept"

type DeptHTTPServer interface {
	// CreateDept 创建部门
	CreateDept(context.Context, *CreateDeptRequest) (*CreateDeptReply, error)
	// DeleteDept 删除部门
	DeleteDept(context.Context, *DeleteDeptRequest) (*DeleteDeptReply, error)
	// GetDeptTree 获取部门关系结构
	GetDeptTree(context.Context, *GetDeptTreeRequest) (*GetDeptTreeReply, error)
	// ListDept 部门列表
	ListDept(context.Context, *ListDeptRequest) (*ListDeptReply, error)
	// RoleDeptTreeSelect 获取角色部门树
	RoleDeptTreeSelect(context.Context, *RoleDeptTreeSelectRequest) (*RoleDeptTreeSelectReply, error)
	// UpdateDept 更新部门
	UpdateDept(context.Context, *UpdateDeptRequest) (*UpdateDeptReply, error)
}

func RegisterDeptHTTPServer(s *http.Server, srv DeptHTTPServer) {
	r := s.Route("/")
	r.GET("/system/dept/list", _Dept_ListDept0_HTTP_Handler(srv))
	r.GET("/system/dept/deptTree", _Dept_GetDeptTree0_HTTP_Handler(srv))
	r.POST("/system/dept", _Dept_CreateDept0_HTTP_Handler(srv))
	r.PUT("/system/dept", _Dept_UpdateDept0_HTTP_Handler(srv))
	r.DELETE("/system/dept/{id}", _Dept_DeleteDept0_HTTP_Handler(srv))
	r.GET("/system/dept/roleDeptTreeSelect/{roleId}", _Dept_RoleDeptTreeSelect0_HTTP_Handler(srv))
}

func _Dept_ListDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptListDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDept(ctx, req.(*ListDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_GetDeptTree0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeptTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptGetDeptTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeptTree(ctx, req.(*GetDeptTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDeptTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_CreateDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptCreateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDept(ctx, req.(*CreateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_UpdateDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptUpdateDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDept(ctx, req.(*UpdateDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_DeleteDept0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeptRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptDeleteDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDept(ctx, req.(*DeleteDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeptReply)
		return ctx.Result(200, reply)
	}
}

func _Dept_RoleDeptTreeSelect0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleDeptTreeSelectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptRoleDeptTreeSelect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoleDeptTreeSelect(ctx, req.(*RoleDeptTreeSelectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleDeptTreeSelectReply)
		return ctx.Result(200, reply)
	}
}

type DeptHTTPClient interface {
	CreateDept(ctx context.Context, req *CreateDeptRequest, opts ...http.CallOption) (rsp *CreateDeptReply, err error)
	DeleteDept(ctx context.Context, req *DeleteDeptRequest, opts ...http.CallOption) (rsp *DeleteDeptReply, err error)
	GetDeptTree(ctx context.Context, req *GetDeptTreeRequest, opts ...http.CallOption) (rsp *GetDeptTreeReply, err error)
	ListDept(ctx context.Context, req *ListDeptRequest, opts ...http.CallOption) (rsp *ListDeptReply, err error)
	RoleDeptTreeSelect(ctx context.Context, req *RoleDeptTreeSelectRequest, opts ...http.CallOption) (rsp *RoleDeptTreeSelectReply, err error)
	UpdateDept(ctx context.Context, req *UpdateDeptRequest, opts ...http.CallOption) (rsp *UpdateDeptReply, err error)
}

type DeptHTTPClientImpl struct {
	cc *http.Client
}

func NewDeptHTTPClient(client *http.Client) DeptHTTPClient {
	return &DeptHTTPClientImpl{client}
}

func (c *DeptHTTPClientImpl) CreateDept(ctx context.Context, in *CreateDeptRequest, opts ...http.CallOption) (*CreateDeptReply, error) {
	var out CreateDeptReply
	pattern := "/system/dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptCreateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeptHTTPClientImpl) DeleteDept(ctx context.Context, in *DeleteDeptRequest, opts ...http.CallOption) (*DeleteDeptReply, error) {
	var out DeleteDeptReply
	pattern := "/system/dept/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptDeleteDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeptHTTPClientImpl) GetDeptTree(ctx context.Context, in *GetDeptTreeRequest, opts ...http.CallOption) (*GetDeptTreeReply, error) {
	var out GetDeptTreeReply
	pattern := "/system/dept/deptTree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptGetDeptTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeptHTTPClientImpl) ListDept(ctx context.Context, in *ListDeptRequest, opts ...http.CallOption) (*ListDeptReply, error) {
	var out ListDeptReply
	pattern := "/system/dept/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptListDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeptHTTPClientImpl) RoleDeptTreeSelect(ctx context.Context, in *RoleDeptTreeSelectRequest, opts ...http.CallOption) (*RoleDeptTreeSelectReply, error) {
	var out RoleDeptTreeSelectReply
	pattern := "/system/dept/roleDeptTreeSelect/{roleId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptRoleDeptTreeSelect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeptHTTPClientImpl) UpdateDept(ctx context.Context, in *UpdateDeptRequest, opts ...http.CallOption) (*UpdateDeptReply, error) {
	var out UpdateDeptReply
	pattern := "/system/dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptUpdateDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
