// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: dicttype.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DictType_ListDictType_FullMethodName   = "/api.admin.v1.DictType/ListDictType"
	DictType_CreateDictType_FullMethodName = "/api.admin.v1.DictType/CreateDictType"
	DictType_UpdateDictType_FullMethodName = "/api.admin.v1.DictType/UpdateDictType"
	DictType_DeleteDictType_FullMethodName = "/api.admin.v1.DictType/DeleteDictType"
	DictType_GetDictType_FullMethodName    = "/api.admin.v1.DictType/GetDictType"
)

// DictTypeClient is the client API for DictType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictTypeClient interface {
	// 列表信息
	ListDictType(ctx context.Context, in *ListDictTypeRequest, opts ...grpc.CallOption) (*ListDictTypeReply, error)
	// 创建
	CreateDictType(ctx context.Context, in *CreateDictTypeRequest, opts ...grpc.CallOption) (*CreateDictTypeReply, error)
	// 更新
	UpdateDictType(ctx context.Context, in *UpdateDictTypeRequest, opts ...grpc.CallOption) (*UpdateDictTypeReply, error)
	// 删除
	DeleteDictType(ctx context.Context, in *DeleteDictTypeRequest, opts ...grpc.CallOption) (*DeleteDictTypeReply, error)
	// 获取信息
	GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*GetDictTypeReply, error)
}

type dictTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewDictTypeClient(cc grpc.ClientConnInterface) DictTypeClient {
	return &dictTypeClient{cc}
}

func (c *dictTypeClient) ListDictType(ctx context.Context, in *ListDictTypeRequest, opts ...grpc.CallOption) (*ListDictTypeReply, error) {
	out := new(ListDictTypeReply)
	err := c.cc.Invoke(ctx, DictType_ListDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeClient) CreateDictType(ctx context.Context, in *CreateDictTypeRequest, opts ...grpc.CallOption) (*CreateDictTypeReply, error) {
	out := new(CreateDictTypeReply)
	err := c.cc.Invoke(ctx, DictType_CreateDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeClient) UpdateDictType(ctx context.Context, in *UpdateDictTypeRequest, opts ...grpc.CallOption) (*UpdateDictTypeReply, error) {
	out := new(UpdateDictTypeReply)
	err := c.cc.Invoke(ctx, DictType_UpdateDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeClient) DeleteDictType(ctx context.Context, in *DeleteDictTypeRequest, opts ...grpc.CallOption) (*DeleteDictTypeReply, error) {
	out := new(DeleteDictTypeReply)
	err := c.cc.Invoke(ctx, DictType_DeleteDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeClient) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*GetDictTypeReply, error) {
	out := new(GetDictTypeReply)
	err := c.cc.Invoke(ctx, DictType_GetDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictTypeServer is the server API for DictType service.
// All implementations must embed UnimplementedDictTypeServer
// for forward compatibility
type DictTypeServer interface {
	// 列表信息
	ListDictType(context.Context, *ListDictTypeRequest) (*ListDictTypeReply, error)
	// 创建
	CreateDictType(context.Context, *CreateDictTypeRequest) (*CreateDictTypeReply, error)
	// 更新
	UpdateDictType(context.Context, *UpdateDictTypeRequest) (*UpdateDictTypeReply, error)
	// 删除
	DeleteDictType(context.Context, *DeleteDictTypeRequest) (*DeleteDictTypeReply, error)
	// 获取信息
	GetDictType(context.Context, *GetDictTypeRequest) (*GetDictTypeReply, error)
	mustEmbedUnimplementedDictTypeServer()
}

// UnimplementedDictTypeServer must be embedded to have forward compatible implementations.
type UnimplementedDictTypeServer struct {
}

func (UnimplementedDictTypeServer) ListDictType(context.Context, *ListDictTypeRequest) (*ListDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictType not implemented")
}
func (UnimplementedDictTypeServer) CreateDictType(context.Context, *CreateDictTypeRequest) (*CreateDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictType not implemented")
}
func (UnimplementedDictTypeServer) UpdateDictType(context.Context, *UpdateDictTypeRequest) (*UpdateDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictType not implemented")
}
func (UnimplementedDictTypeServer) DeleteDictType(context.Context, *DeleteDictTypeRequest) (*DeleteDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictType not implemented")
}
func (UnimplementedDictTypeServer) GetDictType(context.Context, *GetDictTypeRequest) (*GetDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictType not implemented")
}
func (UnimplementedDictTypeServer) mustEmbedUnimplementedDictTypeServer() {}

// UnsafeDictTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictTypeServer will
// result in compilation errors.
type UnsafeDictTypeServer interface {
	mustEmbedUnimplementedDictTypeServer()
}

func RegisterDictTypeServer(s grpc.ServiceRegistrar, srv DictTypeServer) {
	s.RegisterService(&DictType_ServiceDesc, srv)
}

func _DictType_ListDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServer).ListDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictType_ListDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServer).ListDictType(ctx, req.(*ListDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictType_CreateDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServer).CreateDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictType_CreateDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServer).CreateDictType(ctx, req.(*CreateDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictType_UpdateDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServer).UpdateDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictType_UpdateDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServer).UpdateDictType(ctx, req.(*UpdateDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictType_DeleteDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServer).DeleteDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictType_DeleteDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServer).DeleteDictType(ctx, req.(*DeleteDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictType_GetDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServer).GetDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictType_GetDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServer).GetDictType(ctx, req.(*GetDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictType_ServiceDesc is the grpc.ServiceDesc for DictType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.v1.DictType",
	HandlerType: (*DictTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDictType",
			Handler:    _DictType_ListDictType_Handler,
		},
		{
			MethodName: "CreateDictType",
			Handler:    _DictType_CreateDictType_Handler,
		},
		{
			MethodName: "UpdateDictType",
			Handler:    _DictType_UpdateDictType_Handler,
		},
		{
			MethodName: "DeleteDictType",
			Handler:    _DictType_DeleteDictType_Handler,
		},
		{
			MethodName: "GetDictType",
			Handler:    _DictType_GetDictType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dicttype.proto",
}
