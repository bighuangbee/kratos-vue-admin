// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: dicttype.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDictTypeCreateDictType = "/api.admin.v1.DictType/CreateDictType"
const OperationDictTypeDeleteDictType = "/api.admin.v1.DictType/DeleteDictType"
const OperationDictTypeGetDictType = "/api.admin.v1.DictType/GetDictType"
const OperationDictTypeListDictType = "/api.admin.v1.DictType/ListDictType"
const OperationDictTypeUpdateDictType = "/api.admin.v1.DictType/UpdateDictType"

type DictTypeHTTPServer interface {
	// CreateDictType创建
	CreateDictType(context.Context, *CreateDictTypeRequest) (*CreateDictTypeReply, error)
	// DeleteDictType删除
	DeleteDictType(context.Context, *DeleteDictTypeRequest) (*DeleteDictTypeReply, error)
	// GetDictType获取信息
	GetDictType(context.Context, *GetDictTypeRequest) (*GetDictTypeReply, error)
	// ListDictType列表信息
	ListDictType(context.Context, *ListDictTypeRequest) (*ListDictTypeReply, error)
	// UpdateDictType更新
	UpdateDictType(context.Context, *UpdateDictTypeRequest) (*UpdateDictTypeReply, error)
}

func RegisterDictTypeHTTPServer(s *http.Server, srv DictTypeHTTPServer) {
	r := s.Route("/")
	r.GET("/system/dict/type/list", _DictType_ListDictType0_HTTP_Handler(srv))
	r.POST("/system/dict/type", _DictType_CreateDictType0_HTTP_Handler(srv))
	r.PUT("/system/dict/type", _DictType_UpdateDictType0_HTTP_Handler(srv))
	r.DELETE("/system/dict/type/{dictId}", _DictType_DeleteDictType0_HTTP_Handler(srv))
	r.GET("/system/dict/type/{dictId}", _DictType_GetDictType0_HTTP_Handler(srv))
}

func _DictType_ListDictType0_HTTP_Handler(srv DictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictTypeListDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictType(ctx, req.(*ListDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _DictType_CreateDictType0_HTTP_Handler(srv DictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictTypeCreateDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictType(ctx, req.(*CreateDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _DictType_UpdateDictType0_HTTP_Handler(srv DictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictTypeUpdateDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictType(ctx, req.(*UpdateDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _DictType_DeleteDictType0_HTTP_Handler(srv DictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictTypeDeleteDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictType(ctx, req.(*DeleteDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _DictType_GetDictType0_HTTP_Handler(srv DictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictTypeGetDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictType(ctx, req.(*GetDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDictTypeReply)
		return ctx.Result(200, reply)
	}
}

type DictTypeHTTPClient interface {
	CreateDictType(ctx context.Context, req *CreateDictTypeRequest, opts ...http.CallOption) (rsp *CreateDictTypeReply, err error)
	DeleteDictType(ctx context.Context, req *DeleteDictTypeRequest, opts ...http.CallOption) (rsp *DeleteDictTypeReply, err error)
	GetDictType(ctx context.Context, req *GetDictTypeRequest, opts ...http.CallOption) (rsp *GetDictTypeReply, err error)
	ListDictType(ctx context.Context, req *ListDictTypeRequest, opts ...http.CallOption) (rsp *ListDictTypeReply, err error)
	UpdateDictType(ctx context.Context, req *UpdateDictTypeRequest, opts ...http.CallOption) (rsp *UpdateDictTypeReply, err error)
}

type DictTypeHTTPClientImpl struct {
	cc *http.Client
}

func NewDictTypeHTTPClient(client *http.Client) DictTypeHTTPClient {
	return &DictTypeHTTPClientImpl{client}
}

func (c *DictTypeHTTPClientImpl) CreateDictType(ctx context.Context, in *CreateDictTypeRequest, opts ...http.CallOption) (*CreateDictTypeReply, error) {
	var out CreateDictTypeReply
	pattern := "/system/dict/type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictTypeCreateDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictTypeHTTPClientImpl) DeleteDictType(ctx context.Context, in *DeleteDictTypeRequest, opts ...http.CallOption) (*DeleteDictTypeReply, error) {
	var out DeleteDictTypeReply
	pattern := "/system/dict/type/{dictId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictTypeDeleteDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictTypeHTTPClientImpl) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...http.CallOption) (*GetDictTypeReply, error) {
	var out GetDictTypeReply
	pattern := "/system/dict/type/{dictId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictTypeGetDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictTypeHTTPClientImpl) ListDictType(ctx context.Context, in *ListDictTypeRequest, opts ...http.CallOption) (*ListDictTypeReply, error) {
	var out ListDictTypeReply
	pattern := "/system/dict/type/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDictTypeListDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictTypeHTTPClientImpl) UpdateDictType(ctx context.Context, in *UpdateDictTypeRequest, opts ...http.CallOption) (*UpdateDictTypeReply, error) {
	var out UpdateDictTypeReply
	pattern := "/system/dict/type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictTypeUpdateDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
