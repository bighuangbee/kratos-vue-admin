// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysPostHTTPServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error)
	ListPost(context.Context, *ListPostRequest) (*ListPostReply, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error)
}

func RegisterSysPostHTTPServer(s *http.Server, srv SysPostHTTPServer) {
	r := s.Route("/")
	r.GET("/system/post/list", _SysPost_ListPost0_HTTP_Handler(srv))
	r.POST("/system/post", _SysPost_CreatePost0_HTTP_Handler(srv))
	r.PUT("/system/post", _SysPost_UpdatePost0_HTTP_Handler(srv))
	r.DELETE("/system/post/{id}", _SysPost_DeletePost0_HTTP_Handler(srv))
}

func _SysPost_ListPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.SysPost/ListPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPost(ctx, req.(*ListPostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPostReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_CreatePost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.SysPost/CreatePost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_UpdatePost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.SysPost/UpdatePost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePost(ctx, req.(*UpdatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePostReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_DeletePost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.SysPost/DeletePost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePost(ctx, req.(*DeletePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePostReply)
		return ctx.Result(200, reply)
	}
}

type SysPostHTTPClient interface {
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...http.CallOption) (rsp *CreatePostReply, err error)
	DeletePost(ctx context.Context, req *DeletePostRequest, opts ...http.CallOption) (rsp *DeletePostReply, err error)
	ListPost(ctx context.Context, req *ListPostRequest, opts ...http.CallOption) (rsp *ListPostReply, err error)
	UpdatePost(ctx context.Context, req *UpdatePostRequest, opts ...http.CallOption) (rsp *UpdatePostReply, err error)
}

type SysPostHTTPClientImpl struct {
	cc *http.Client
}

func NewSysPostHTTPClient(client *http.Client) SysPostHTTPClient {
	return &SysPostHTTPClientImpl{client}
}

func (c *SysPostHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...http.CallOption) (*CreatePostReply, error) {
	var out CreatePostReply
	pattern := "/system/post"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.SysPost/CreatePost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...http.CallOption) (*DeletePostReply, error) {
	var out DeletePostReply
	pattern := "/system/post/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.SysPost/DeletePost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) ListPost(ctx context.Context, in *ListPostRequest, opts ...http.CallOption) (*ListPostReply, error) {
	var out ListPostReply
	pattern := "/system/post/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.SysPost/ListPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...http.CallOption) (*UpdatePostReply, error) {
	var out UpdatePostReply
	pattern := "/system/post"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.SysPost/UpdatePost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
