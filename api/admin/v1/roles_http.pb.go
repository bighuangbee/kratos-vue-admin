// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: roles.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRolesChangeRoleStatus = "/api.admin.v1.Roles/ChangeRoleStatus"
const OperationRolesCreateRoles = "/api.admin.v1.Roles/CreateRoles"
const OperationRolesDataScope = "/api.admin.v1.Roles/DataScope"
const OperationRolesDeleteRoles = "/api.admin.v1.Roles/DeleteRoles"
const OperationRolesGetRoles = "/api.admin.v1.Roles/GetRoles"
const OperationRolesListRoles = "/api.admin.v1.Roles/ListRoles"
const OperationRolesRoles = "/api.admin.v1.Roles/Roles"
const OperationRolesUpdateRoles = "/api.admin.v1.Roles/UpdateRoles"

type RolesHTTPServer interface {
	// ChangeRoleStatus 更改角色状态
	ChangeRoleStatus(context.Context, *ChangeRoleStatusRequest) (*ChangeRoleStatusReply, error)
	// CreateRoles 创建角色
	CreateRoles(context.Context, *CreateRolesRequest) (*CreateRolesReply, error)
	// DataScope 更改角色数据范围
	DataScope(context.Context, *DataScopeRequest) (*DataScopeReply, error)
	// DeleteRoles 删除角色
	DeleteRoles(context.Context, *DeleteRolesRequest) (*DeleteRolesReply, error)
	// GetRoles 获取角色
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesReply, error)
	// ListRoles 角色列表
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesReply, error)
	// Roles 全部角色选项
	Roles(context.Context, *ListRolesRequest) (*ListRolesReply, error)
	// UpdateRoles 更新角色
	UpdateRoles(context.Context, *UpdateRolesRequest) (*UpdateRolesReply, error)
}

func RegisterRolesHTTPServer(s *http.Server, srv RolesHTTPServer) {
	r := s.Route("/")
	r.POST("/system/role", _Roles_CreateRoles0_HTTP_Handler(srv))
	r.PUT("/system/role", _Roles_UpdateRoles0_HTTP_Handler(srv))
	r.GET("/system/role/list", _Roles_ListRoles0_HTTP_Handler(srv))
	r.GET("/system/role/roles", _Roles_Roles0_HTTP_Handler(srv))
	r.PUT("/system/role/changeStatus", _Roles_ChangeRoleStatus0_HTTP_Handler(srv))
	r.PUT("/system/role/dataScope", _Roles_DataScope0_HTTP_Handler(srv))
	r.DELETE("/system/role/{id}", _Roles_DeleteRoles0_HTTP_Handler(srv))
	r.GET("/system/role/{id}", _Roles_GetRoles0_HTTP_Handler(srv))
}

func _Roles_CreateRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesCreateRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoles(ctx, req.(*CreateRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_UpdateRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesUpdateRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoles(ctx, req.(*UpdateRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_ListRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesListRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_Roles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Roles(ctx, req.(*ListRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_ChangeRoleStatus0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeRoleStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesChangeRoleStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeRoleStatus(ctx, req.(*ChangeRoleStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeRoleStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_DataScope0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DataScopeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesDataScope)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DataScope(ctx, req.(*DataScopeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataScopeReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_DeleteRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesDeleteRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoles(ctx, req.(*DeleteRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRolesReply)
		return ctx.Result(200, reply)
	}
}

func _Roles_GetRoles0_HTTP_Handler(srv RolesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRolesGetRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoles(ctx, req.(*GetRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesReply)
		return ctx.Result(200, reply)
	}
}

type RolesHTTPClient interface {
	ChangeRoleStatus(ctx context.Context, req *ChangeRoleStatusRequest, opts ...http.CallOption) (rsp *ChangeRoleStatusReply, err error)
	CreateRoles(ctx context.Context, req *CreateRolesRequest, opts ...http.CallOption) (rsp *CreateRolesReply, err error)
	DataScope(ctx context.Context, req *DataScopeRequest, opts ...http.CallOption) (rsp *DataScopeReply, err error)
	DeleteRoles(ctx context.Context, req *DeleteRolesRequest, opts ...http.CallOption) (rsp *DeleteRolesReply, err error)
	GetRoles(ctx context.Context, req *GetRolesRequest, opts ...http.CallOption) (rsp *GetRolesReply, err error)
	ListRoles(ctx context.Context, req *ListRolesRequest, opts ...http.CallOption) (rsp *ListRolesReply, err error)
	Roles(ctx context.Context, req *ListRolesRequest, opts ...http.CallOption) (rsp *ListRolesReply, err error)
	UpdateRoles(ctx context.Context, req *UpdateRolesRequest, opts ...http.CallOption) (rsp *UpdateRolesReply, err error)
}

type RolesHTTPClientImpl struct {
	cc *http.Client
}

func NewRolesHTTPClient(client *http.Client) RolesHTTPClient {
	return &RolesHTTPClientImpl{client}
}

func (c *RolesHTTPClientImpl) ChangeRoleStatus(ctx context.Context, in *ChangeRoleStatusRequest, opts ...http.CallOption) (*ChangeRoleStatusReply, error) {
	var out ChangeRoleStatusReply
	pattern := "/system/role/changeStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRolesChangeRoleStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) CreateRoles(ctx context.Context, in *CreateRolesRequest, opts ...http.CallOption) (*CreateRolesReply, error) {
	var out CreateRolesReply
	pattern := "/system/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRolesCreateRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) DataScope(ctx context.Context, in *DataScopeRequest, opts ...http.CallOption) (*DataScopeReply, error) {
	var out DataScopeReply
	pattern := "/system/role/dataScope"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRolesDataScope))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) DeleteRoles(ctx context.Context, in *DeleteRolesRequest, opts ...http.CallOption) (*DeleteRolesReply, error) {
	var out DeleteRolesReply
	pattern := "/system/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRolesDeleteRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...http.CallOption) (*GetRolesReply, error) {
	var out GetRolesReply
	pattern := "/system/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRolesGetRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...http.CallOption) (*ListRolesReply, error) {
	var out ListRolesReply
	pattern := "/system/role/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRolesListRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) Roles(ctx context.Context, in *ListRolesRequest, opts ...http.CallOption) (*ListRolesReply, error) {
	var out ListRolesReply
	pattern := "/system/role/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRolesRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RolesHTTPClientImpl) UpdateRoles(ctx context.Context, in *UpdateRolesRequest, opts ...http.CallOption) (*UpdateRolesReply, error) {
	var out UpdateRolesReply
	pattern := "/system/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRolesUpdateRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
