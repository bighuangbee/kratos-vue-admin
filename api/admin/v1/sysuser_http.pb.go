// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: sysuser.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysuserAuth = "/api.admin.v1.Sysuser/Auth"
const OperationSysuserChangeStatus = "/api.admin.v1.Sysuser/ChangeStatus"
const OperationSysuserCreateSysuser = "/api.admin.v1.Sysuser/CreateSysuser"
const OperationSysuserDeleteSysuser = "/api.admin.v1.Sysuser/DeleteSysuser"
const OperationSysuserGetCaptcha = "/api.admin.v1.Sysuser/GetCaptcha"
const OperationSysuserGetPostInit = "/api.admin.v1.Sysuser/GetPostInit"
const OperationSysuserGetSysuser = "/api.admin.v1.Sysuser/GetSysuser"
const OperationSysuserGetUserGoogleSecret = "/api.admin.v1.Sysuser/GetUserGoogleSecret"
const OperationSysuserGetUserRolePost = "/api.admin.v1.Sysuser/GetUserRolePost"
const OperationSysuserListSysuser = "/api.admin.v1.Sysuser/ListSysuser"
const OperationSysuserLogin = "/api.admin.v1.Sysuser/Login"
const OperationSysuserLogout = "/api.admin.v1.Sysuser/Logout"
const OperationSysuserUpdatePassword = "/api.admin.v1.Sysuser/UpdatePassword"
const OperationSysuserUpdateSysuser = "/api.admin.v1.Sysuser/UpdateSysuser"

type SysuserHTTPServer interface {
	// Auth 获取用户权限
	Auth(context.Context, *AuthRequest) (*AuthReply, error)
	// ChangeStatus 更新用户状态
	ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusReply, error)
	// CreateSysuser 创建用户
	CreateSysuser(context.Context, *CreateSysuserRequest) (*CreateSysuserReply, error)
	// DeleteSysuser 删除用户
	DeleteSysuser(context.Context, *DeleteSysuserRequest) (*DeleteSysuserReply, error)
	// GetCaptcha 获取验证码
	GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaReply, error)
	// GetPostInit 获取岗位
	GetPostInit(context.Context, *GetPostInitRequest) (*GetPostInitReply, error)
	// GetSysuser 获取用户
	GetSysuser(context.Context, *GetSysuserRequest) (*GetSysuserReply, error)
	// GetUserGoogleSecret 生成密钥和二维码
	GetUserGoogleSecret(context.Context, *GetUserGoogleSecretRequest) (*GetUserGoogleSecretReply, error)
	// GetUserRolePost 获取RoPo
	GetUserRolePost(context.Context, *GetUserRolePostRequest) (*GetUserRolePostReply, error)
	// ListSysuser 用户列表
	ListSysuser(context.Context, *ListSysuserRequest) (*ListSysuserReply, error)
	// Login 登入
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// Logout 登出
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// UpdatePassword 更新密码
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordReply, error)
	// UpdateSysuser 更新用户
	UpdateSysuser(context.Context, *UpdateSysuserRequest) (*UpdateSysuserReply, error)
}

func RegisterSysuserHTTPServer(s *http.Server, srv SysuserHTTPServer) {
	r := s.Route("/")
	r.POST("/system/user", _Sysuser_CreateSysuser0_HTTP_Handler(srv))
	r.PUT("/system/user", _Sysuser_UpdateSysuser0_HTTP_Handler(srv))
	r.DELETE("/system/user/{id}", _Sysuser_DeleteSysuser0_HTTP_Handler(srv))
	r.GET("/system/user/getById/{id}", _Sysuser_GetSysuser0_HTTP_Handler(srv))
	r.GET("/system/user/list", _Sysuser_ListSysuser0_HTTP_Handler(srv))
	r.GET("/system/user/getCaptcha", _Sysuser_GetCaptcha0_HTTP_Handler(srv))
	r.POST("/system/user/login", _Sysuser_Login0_HTTP_Handler(srv))
	r.POST("/system/user/logout", _Sysuser_Logout0_HTTP_Handler(srv))
	r.GET("/system/user/auth", _Sysuser_Auth0_HTTP_Handler(srv))
	r.PUT("/system/user/changeStatus", _Sysuser_ChangeStatus0_HTTP_Handler(srv))
	r.PUT("/system/user/pwd", _Sysuser_UpdatePassword0_HTTP_Handler(srv))
	r.GET("/system/user/getInit", _Sysuser_GetPostInit0_HTTP_Handler(srv))
	r.GET("/system/user/getRoPo", _Sysuser_GetUserRolePost0_HTTP_Handler(srv))
	r.GET("/system/user/secret", _Sysuser_GetUserGoogleSecret0_HTTP_Handler(srv))
}

func _Sysuser_CreateSysuser0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSysuserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserCreateSysuser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysuser(ctx, req.(*CreateSysuserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSysuserReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_UpdateSysuser0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSysuserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserUpdateSysuser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysuser(ctx, req.(*UpdateSysuserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSysuserReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_DeleteSysuser0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSysuserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserDeleteSysuser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysuser(ctx, req.(*DeleteSysuserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSysuserReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_GetSysuser0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysuserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserGetSysuser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysuser(ctx, req.(*GetSysuserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSysuserReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_ListSysuser0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSysuserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserListSysuser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSysuser(ctx, req.(*ListSysuserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSysuserReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_GetCaptcha0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCaptchaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserGetCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCaptcha(ctx, req.(*GetCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_Login0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_Logout0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_Auth0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Auth(ctx, req.(*AuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_ChangeStatus0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserChangeStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeStatus(ctx, req.(*ChangeStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_UpdatePassword0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserUpdatePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePassword(ctx, req.(*UpdatePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePasswordReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_GetPostInit0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostInitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserGetPostInit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPostInit(ctx, req.(*GetPostInitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPostInitReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_GetUserRolePost0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRolePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserGetUserRolePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserRolePost(ctx, req.(*GetUserRolePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserRolePostReply)
		return ctx.Result(200, reply)
	}
}

func _Sysuser_GetUserGoogleSecret0_HTTP_Handler(srv SysuserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserGoogleSecretRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysuserGetUserGoogleSecret)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserGoogleSecret(ctx, req.(*GetUserGoogleSecretRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserGoogleSecretReply)
		return ctx.Result(200, reply)
	}
}

type SysuserHTTPClient interface {
	Auth(ctx context.Context, req *AuthRequest, opts ...http.CallOption) (rsp *AuthReply, err error)
	ChangeStatus(ctx context.Context, req *ChangeStatusRequest, opts ...http.CallOption) (rsp *ChangeStatusReply, err error)
	CreateSysuser(ctx context.Context, req *CreateSysuserRequest, opts ...http.CallOption) (rsp *CreateSysuserReply, err error)
	DeleteSysuser(ctx context.Context, req *DeleteSysuserRequest, opts ...http.CallOption) (rsp *DeleteSysuserReply, err error)
	GetCaptcha(ctx context.Context, req *GetCaptchaRequest, opts ...http.CallOption) (rsp *GetCaptchaReply, err error)
	GetPostInit(ctx context.Context, req *GetPostInitRequest, opts ...http.CallOption) (rsp *GetPostInitReply, err error)
	GetSysuser(ctx context.Context, req *GetSysuserRequest, opts ...http.CallOption) (rsp *GetSysuserReply, err error)
	GetUserGoogleSecret(ctx context.Context, req *GetUserGoogleSecretRequest, opts ...http.CallOption) (rsp *GetUserGoogleSecretReply, err error)
	GetUserRolePost(ctx context.Context, req *GetUserRolePostRequest, opts ...http.CallOption) (rsp *GetUserRolePostReply, err error)
	ListSysuser(ctx context.Context, req *ListSysuserRequest, opts ...http.CallOption) (rsp *ListSysuserReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	UpdatePassword(ctx context.Context, req *UpdatePasswordRequest, opts ...http.CallOption) (rsp *UpdatePasswordReply, err error)
	UpdateSysuser(ctx context.Context, req *UpdateSysuserRequest, opts ...http.CallOption) (rsp *UpdateSysuserReply, err error)
}

type SysuserHTTPClientImpl struct {
	cc *http.Client
}

func NewSysuserHTTPClient(client *http.Client) SysuserHTTPClient {
	return &SysuserHTTPClientImpl{client}
}

func (c *SysuserHTTPClientImpl) Auth(ctx context.Context, in *AuthRequest, opts ...http.CallOption) (*AuthReply, error) {
	var out AuthReply
	pattern := "/system/user/auth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...http.CallOption) (*ChangeStatusReply, error) {
	var out ChangeStatusReply
	pattern := "/system/user/changeStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysuserChangeStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) CreateSysuser(ctx context.Context, in *CreateSysuserRequest, opts ...http.CallOption) (*CreateSysuserReply, error) {
	var out CreateSysuserReply
	pattern := "/system/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysuserCreateSysuser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) DeleteSysuser(ctx context.Context, in *DeleteSysuserRequest, opts ...http.CallOption) (*DeleteSysuserReply, error) {
	var out DeleteSysuserReply
	pattern := "/system/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserDeleteSysuser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...http.CallOption) (*GetCaptchaReply, error) {
	var out GetCaptchaReply
	pattern := "/system/user/getCaptcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserGetCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) GetPostInit(ctx context.Context, in *GetPostInitRequest, opts ...http.CallOption) (*GetPostInitReply, error) {
	var out GetPostInitReply
	pattern := "/system/user/getInit"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserGetPostInit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) GetSysuser(ctx context.Context, in *GetSysuserRequest, opts ...http.CallOption) (*GetSysuserReply, error) {
	var out GetSysuserReply
	pattern := "/system/user/getById/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserGetSysuser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) GetUserGoogleSecret(ctx context.Context, in *GetUserGoogleSecretRequest, opts ...http.CallOption) (*GetUserGoogleSecretReply, error) {
	var out GetUserGoogleSecretReply
	pattern := "/system/user/secret"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserGetUserGoogleSecret))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) GetUserRolePost(ctx context.Context, in *GetUserRolePostRequest, opts ...http.CallOption) (*GetUserRolePostReply, error) {
	var out GetUserRolePostReply
	pattern := "/system/user/getRoPo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserGetUserRolePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) ListSysuser(ctx context.Context, in *ListSysuserRequest, opts ...http.CallOption) (*ListSysuserReply, error) {
	var out ListSysuserReply
	pattern := "/system/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysuserListSysuser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/system/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysuserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/system/user/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysuserLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...http.CallOption) (*UpdatePasswordReply, error) {
	var out UpdatePasswordReply
	pattern := "/system/user/pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysuserUpdatePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SysuserHTTPClientImpl) UpdateSysuser(ctx context.Context, in *UpdateSysuserRequest, opts ...http.CallOption) (*UpdateSysuserReply, error) {
	var out UpdateSysuserReply
	pattern := "/system/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysuserUpdateSysuser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
