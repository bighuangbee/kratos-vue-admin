// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bighuangbee/kratos-vue-admin/app/admin/internal/data/dal/model"
)

func newLogJob(db *gorm.DB, opts ...gen.DOOption) logJob {
	_logJob := logJob{}

	_logJob.logJobDo.UseDB(db, opts...)
	_logJob.logJobDo.UseModel(&model.LogJob{})

	tableName := _logJob.logJobDo.TableName()
	_logJob.ALL = field.NewAsterisk(tableName)
	_logJob.ID = field.NewInt64(tableName, "id")
	_logJob.Name = field.NewString(tableName, "name")
	_logJob.JobGroup = field.NewString(tableName, "job_group")
	_logJob.EntryID = field.NewInt32(tableName, "entry_id")
	_logJob.InvokeTarget = field.NewString(tableName, "invoke_target")
	_logJob.LogInfo = field.NewString(tableName, "log_info")
	_logJob.Status = field.NewInt32(tableName, "status")
	_logJob.CreatedAt = field.NewTime(tableName, "created_at")
	_logJob.UpdatedAt = field.NewTime(tableName, "updated_at")
	_logJob.DeletedAt = field.NewField(tableName, "deleted_at")

	_logJob.fillFieldMap()

	return _logJob
}

type logJob struct {
	logJobDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键id
	Name         field.String // 任务名称
	JobGroup     field.String // 分组
	EntryID      field.Int32  // 任务id
	InvokeTarget field.String // 调用方法
	LogInfo      field.String // 日志信息
	Status       field.Int32  // 1=正常 2=异常
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (l logJob) Table(newTableName string) *logJob {
	l.logJobDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logJob) As(alias string) *logJob {
	l.logJobDo.DO = *(l.logJobDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logJob) updateTableName(table string) *logJob {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Name = field.NewString(table, "name")
	l.JobGroup = field.NewString(table, "job_group")
	l.EntryID = field.NewInt32(table, "entry_id")
	l.InvokeTarget = field.NewString(table, "invoke_target")
	l.LogInfo = field.NewString(table, "log_info")
	l.Status = field.NewInt32(table, "status")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")

	l.fillFieldMap()

	return l
}

func (l *logJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logJob) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["job_group"] = l.JobGroup
	l.fieldMap["entry_id"] = l.EntryID
	l.fieldMap["invoke_target"] = l.InvokeTarget
	l.fieldMap["log_info"] = l.LogInfo
	l.fieldMap["status"] = l.Status
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
}

func (l logJob) clone(db *gorm.DB) logJob {
	l.logJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logJob) replaceDB(db *gorm.DB) logJob {
	l.logJobDo.ReplaceDB(db)
	return l
}

type logJobDo struct{ gen.DO }

type ILogJobDo interface {
	gen.SubQuery
	Debug() ILogJobDo
	WithContext(ctx context.Context) ILogJobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogJobDo
	WriteDB() ILogJobDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogJobDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogJobDo
	Not(conds ...gen.Condition) ILogJobDo
	Or(conds ...gen.Condition) ILogJobDo
	Select(conds ...field.Expr) ILogJobDo
	Where(conds ...gen.Condition) ILogJobDo
	Order(conds ...field.Expr) ILogJobDo
	Distinct(cols ...field.Expr) ILogJobDo
	Omit(cols ...field.Expr) ILogJobDo
	Join(table schema.Tabler, on ...field.Expr) ILogJobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogJobDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogJobDo
	Group(cols ...field.Expr) ILogJobDo
	Having(conds ...gen.Condition) ILogJobDo
	Limit(limit int) ILogJobDo
	Offset(offset int) ILogJobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogJobDo
	Unscoped() ILogJobDo
	Create(values ...*model.LogJob) error
	CreateInBatches(values []*model.LogJob, batchSize int) error
	Save(values ...*model.LogJob) error
	First() (*model.LogJob, error)
	Take() (*model.LogJob, error)
	Last() (*model.LogJob, error)
	Find() ([]*model.LogJob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogJob, err error)
	FindInBatches(result *[]*model.LogJob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogJob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogJobDo
	Assign(attrs ...field.AssignExpr) ILogJobDo
	Joins(fields ...field.RelationField) ILogJobDo
	Preload(fields ...field.RelationField) ILogJobDo
	FirstOrInit() (*model.LogJob, error)
	FirstOrCreate() (*model.LogJob, error)
	FindByPage(offset int, limit int) (result []*model.LogJob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogJobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logJobDo) Debug() ILogJobDo {
	return l.withDO(l.DO.Debug())
}

func (l logJobDo) WithContext(ctx context.Context) ILogJobDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logJobDo) ReadDB() ILogJobDo {
	return l.Clauses(dbresolver.Read)
}

func (l logJobDo) WriteDB() ILogJobDo {
	return l.Clauses(dbresolver.Write)
}

func (l logJobDo) Session(config *gorm.Session) ILogJobDo {
	return l.withDO(l.DO.Session(config))
}

func (l logJobDo) Clauses(conds ...clause.Expression) ILogJobDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logJobDo) Returning(value interface{}, columns ...string) ILogJobDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logJobDo) Not(conds ...gen.Condition) ILogJobDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logJobDo) Or(conds ...gen.Condition) ILogJobDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logJobDo) Select(conds ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logJobDo) Where(conds ...gen.Condition) ILogJobDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logJobDo) Order(conds ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logJobDo) Distinct(cols ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logJobDo) Omit(cols ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logJobDo) Join(table schema.Tabler, on ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logJobDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logJobDo) Group(cols ...field.Expr) ILogJobDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logJobDo) Having(conds ...gen.Condition) ILogJobDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logJobDo) Limit(limit int) ILogJobDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logJobDo) Offset(offset int) ILogJobDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogJobDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logJobDo) Unscoped() ILogJobDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logJobDo) Create(values ...*model.LogJob) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logJobDo) CreateInBatches(values []*model.LogJob, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logJobDo) Save(values ...*model.LogJob) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logJobDo) First() (*model.LogJob, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogJob), nil
	}
}

func (l logJobDo) Take() (*model.LogJob, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogJob), nil
	}
}

func (l logJobDo) Last() (*model.LogJob, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogJob), nil
	}
}

func (l logJobDo) Find() ([]*model.LogJob, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogJob), err
}

func (l logJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogJob, err error) {
	buf := make([]*model.LogJob, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logJobDo) FindInBatches(result *[]*model.LogJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logJobDo) Attrs(attrs ...field.AssignExpr) ILogJobDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logJobDo) Assign(attrs ...field.AssignExpr) ILogJobDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logJobDo) Joins(fields ...field.RelationField) ILogJobDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logJobDo) Preload(fields ...field.RelationField) ILogJobDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logJobDo) FirstOrInit() (*model.LogJob, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogJob), nil
	}
}

func (l logJobDo) FirstOrCreate() (*model.LogJob, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogJob), nil
	}
}

func (l logJobDo) FindByPage(offset int, limit int) (result []*model.LogJob, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logJobDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logJobDo) Delete(models ...*model.LogJob) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logJobDo) withDO(do gen.Dao) *logJobDo {
	l.DO = *do.(*gen.DO)
	return l
}
