// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bighuangbee/kratos-vue-admin/app/admin/internal/data/dal/model"
)

func newLogOper(db *gorm.DB, opts ...gen.DOOption) logOper {
	_logOper := logOper{}

	_logOper.logOperDo.UseDB(db, opts...)
	_logOper.logOperDo.UseModel(&model.LogOper{})

	tableName := _logOper.logOperDo.TableName()
	_logOper.ALL = field.NewAsterisk(tableName)
	_logOper.ID = field.NewInt64(tableName, "id")
	_logOper.Title = field.NewString(tableName, "title")
	_logOper.BusinessType = field.NewInt32(tableName, "business_type")
	_logOper.URL = field.NewString(tableName, "url")
	_logOper.Method = field.NewString(tableName, "method")
	_logOper.UserName = field.NewString(tableName, "user_name")
	_logOper.UserID = field.NewInt64(tableName, "user_id")
	_logOper.IP = field.NewString(tableName, "ip")
	_logOper.Agent = field.NewString(tableName, "agent")
	_logOper.Latency = field.NewInt32(tableName, "latency")
	_logOper.Resp = field.NewString(tableName, "resp")
	_logOper.Status = field.NewInt32(tableName, "status")
	_logOper.ErrorMessage = field.NewString(tableName, "error_message")
	_logOper.CreatedAt = field.NewTime(tableName, "created_at")
	_logOper.UpdatedAt = field.NewTime(tableName, "updated_at")
	_logOper.DeletedAt = field.NewField(tableName, "deleted_at")

	_logOper.fillFieldMap()

	return _logOper
}

type logOper struct {
	logOperDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键id
	Title        field.String // 操作的模块
	BusinessType field.Int32  // 0其它 1新增 2修改 3删除
	URL          field.String // 操作url
	Method       field.String // 请求方法
	UserName     field.String // 操作人员
	UserID       field.Int64  // 用户id
	IP           field.String // 操作IP
	Agent        field.String // 代理
	Latency      field.Int32  // 延迟
	Resp         field.String // 请求参数
	Status       field.Int32  // 1=正常 2=异常
	ErrorMessage field.String // 错误信息
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (l logOper) Table(newTableName string) *logOper {
	l.logOperDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logOper) As(alias string) *logOper {
	l.logOperDo.DO = *(l.logOperDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logOper) updateTableName(table string) *logOper {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Title = field.NewString(table, "title")
	l.BusinessType = field.NewInt32(table, "business_type")
	l.URL = field.NewString(table, "url")
	l.Method = field.NewString(table, "method")
	l.UserName = field.NewString(table, "user_name")
	l.UserID = field.NewInt64(table, "user_id")
	l.IP = field.NewString(table, "ip")
	l.Agent = field.NewString(table, "agent")
	l.Latency = field.NewInt32(table, "latency")
	l.Resp = field.NewString(table, "resp")
	l.Status = field.NewInt32(table, "status")
	l.ErrorMessage = field.NewString(table, "error_message")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")

	l.fillFieldMap()

	return l
}

func (l *logOper) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logOper) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 16)
	l.fieldMap["id"] = l.ID
	l.fieldMap["title"] = l.Title
	l.fieldMap["business_type"] = l.BusinessType
	l.fieldMap["url"] = l.URL
	l.fieldMap["method"] = l.Method
	l.fieldMap["user_name"] = l.UserName
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["ip"] = l.IP
	l.fieldMap["agent"] = l.Agent
	l.fieldMap["latency"] = l.Latency
	l.fieldMap["resp"] = l.Resp
	l.fieldMap["status"] = l.Status
	l.fieldMap["error_message"] = l.ErrorMessage
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
}

func (l logOper) clone(db *gorm.DB) logOper {
	l.logOperDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logOper) replaceDB(db *gorm.DB) logOper {
	l.logOperDo.ReplaceDB(db)
	return l
}

type logOperDo struct{ gen.DO }

type ILogOperDo interface {
	gen.SubQuery
	Debug() ILogOperDo
	WithContext(ctx context.Context) ILogOperDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogOperDo
	WriteDB() ILogOperDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogOperDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogOperDo
	Not(conds ...gen.Condition) ILogOperDo
	Or(conds ...gen.Condition) ILogOperDo
	Select(conds ...field.Expr) ILogOperDo
	Where(conds ...gen.Condition) ILogOperDo
	Order(conds ...field.Expr) ILogOperDo
	Distinct(cols ...field.Expr) ILogOperDo
	Omit(cols ...field.Expr) ILogOperDo
	Join(table schema.Tabler, on ...field.Expr) ILogOperDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogOperDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogOperDo
	Group(cols ...field.Expr) ILogOperDo
	Having(conds ...gen.Condition) ILogOperDo
	Limit(limit int) ILogOperDo
	Offset(offset int) ILogOperDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogOperDo
	Unscoped() ILogOperDo
	Create(values ...*model.LogOper) error
	CreateInBatches(values []*model.LogOper, batchSize int) error
	Save(values ...*model.LogOper) error
	First() (*model.LogOper, error)
	Take() (*model.LogOper, error)
	Last() (*model.LogOper, error)
	Find() ([]*model.LogOper, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogOper, err error)
	FindInBatches(result *[]*model.LogOper, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogOper) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogOperDo
	Assign(attrs ...field.AssignExpr) ILogOperDo
	Joins(fields ...field.RelationField) ILogOperDo
	Preload(fields ...field.RelationField) ILogOperDo
	FirstOrInit() (*model.LogOper, error)
	FirstOrCreate() (*model.LogOper, error)
	FindByPage(offset int, limit int) (result []*model.LogOper, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogOperDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logOperDo) Debug() ILogOperDo {
	return l.withDO(l.DO.Debug())
}

func (l logOperDo) WithContext(ctx context.Context) ILogOperDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logOperDo) ReadDB() ILogOperDo {
	return l.Clauses(dbresolver.Read)
}

func (l logOperDo) WriteDB() ILogOperDo {
	return l.Clauses(dbresolver.Write)
}

func (l logOperDo) Session(config *gorm.Session) ILogOperDo {
	return l.withDO(l.DO.Session(config))
}

func (l logOperDo) Clauses(conds ...clause.Expression) ILogOperDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logOperDo) Returning(value interface{}, columns ...string) ILogOperDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logOperDo) Not(conds ...gen.Condition) ILogOperDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logOperDo) Or(conds ...gen.Condition) ILogOperDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logOperDo) Select(conds ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logOperDo) Where(conds ...gen.Condition) ILogOperDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logOperDo) Order(conds ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logOperDo) Distinct(cols ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logOperDo) Omit(cols ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logOperDo) Join(table schema.Tabler, on ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logOperDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logOperDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logOperDo) Group(cols ...field.Expr) ILogOperDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logOperDo) Having(conds ...gen.Condition) ILogOperDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logOperDo) Limit(limit int) ILogOperDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logOperDo) Offset(offset int) ILogOperDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logOperDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogOperDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logOperDo) Unscoped() ILogOperDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logOperDo) Create(values ...*model.LogOper) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logOperDo) CreateInBatches(values []*model.LogOper, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logOperDo) Save(values ...*model.LogOper) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logOperDo) First() (*model.LogOper, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogOper), nil
	}
}

func (l logOperDo) Take() (*model.LogOper, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogOper), nil
	}
}

func (l logOperDo) Last() (*model.LogOper, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogOper), nil
	}
}

func (l logOperDo) Find() ([]*model.LogOper, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogOper), err
}

func (l logOperDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogOper, err error) {
	buf := make([]*model.LogOper, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logOperDo) FindInBatches(result *[]*model.LogOper, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logOperDo) Attrs(attrs ...field.AssignExpr) ILogOperDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logOperDo) Assign(attrs ...field.AssignExpr) ILogOperDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logOperDo) Joins(fields ...field.RelationField) ILogOperDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logOperDo) Preload(fields ...field.RelationField) ILogOperDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logOperDo) FirstOrInit() (*model.LogOper, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogOper), nil
	}
}

func (l logOperDo) FirstOrCreate() (*model.LogOper, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogOper), nil
	}
}

func (l logOperDo) FindByPage(offset int, limit int) (result []*model.LogOper, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logOperDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logOperDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logOperDo) Delete(models ...*model.LogOper) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logOperDo) withDO(do gen.Dao) *logOperDo {
	l.DO = *do.(*gen.DO)
	return l
}
