// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bighuangbee/kratos-vue-admin/app/admin/internal/data/dal/model"
)

func newSysDiscovery(db *gorm.DB, opts ...gen.DOOption) sysDiscovery {
	_sysDiscovery := sysDiscovery{}

	_sysDiscovery.sysDiscoveryDo.UseDB(db, opts...)
	_sysDiscovery.sysDiscoveryDo.UseModel(&model.SysDiscovery{})

	tableName := _sysDiscovery.sysDiscoveryDo.TableName()
	_sysDiscovery.ALL = field.NewAsterisk(tableName)
	_sysDiscovery.ID = field.NewInt32(tableName, "id")
	_sysDiscovery.Name = field.NewString(tableName, "name")
	_sysDiscovery.Picture = field.NewString(tableName, "picture")
	_sysDiscovery.Rank = field.NewInt32(tableName, "rank")
	_sysDiscovery.Link = field.NewString(tableName, "link")
	_sysDiscovery.Status = field.NewInt32(tableName, "status")

	_sysDiscovery.fillFieldMap()

	return _sysDiscovery
}

type sysDiscovery struct {
	sysDiscoveryDo

	ALL     field.Asterisk
	ID      field.Int32
	Name    field.String // 名称
	Picture field.String // 发现页图片
	Rank    field.Int32  // 排序
	Link    field.String // 发现页链接
	Status  field.Int32  // 发现页状态, 1-正常，2-异常

	fieldMap map[string]field.Expr
}

func (s sysDiscovery) Table(newTableName string) *sysDiscovery {
	s.sysDiscoveryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDiscovery) As(alias string) *sysDiscovery {
	s.sysDiscoveryDo.DO = *(s.sysDiscoveryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDiscovery) updateTableName(table string) *sysDiscovery {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Picture = field.NewString(table, "picture")
	s.Rank = field.NewInt32(table, "rank")
	s.Link = field.NewString(table, "link")
	s.Status = field.NewInt32(table, "status")

	s.fillFieldMap()

	return s
}

func (s *sysDiscovery) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDiscovery) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["picture"] = s.Picture
	s.fieldMap["rank"] = s.Rank
	s.fieldMap["link"] = s.Link
	s.fieldMap["status"] = s.Status
}

func (s sysDiscovery) clone(db *gorm.DB) sysDiscovery {
	s.sysDiscoveryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDiscovery) replaceDB(db *gorm.DB) sysDiscovery {
	s.sysDiscoveryDo.ReplaceDB(db)
	return s
}

type sysDiscoveryDo struct{ gen.DO }

type ISysDiscoveryDo interface {
	gen.SubQuery
	Debug() ISysDiscoveryDo
	WithContext(ctx context.Context) ISysDiscoveryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDiscoveryDo
	WriteDB() ISysDiscoveryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDiscoveryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDiscoveryDo
	Not(conds ...gen.Condition) ISysDiscoveryDo
	Or(conds ...gen.Condition) ISysDiscoveryDo
	Select(conds ...field.Expr) ISysDiscoveryDo
	Where(conds ...gen.Condition) ISysDiscoveryDo
	Order(conds ...field.Expr) ISysDiscoveryDo
	Distinct(cols ...field.Expr) ISysDiscoveryDo
	Omit(cols ...field.Expr) ISysDiscoveryDo
	Join(table schema.Tabler, on ...field.Expr) ISysDiscoveryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDiscoveryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDiscoveryDo
	Group(cols ...field.Expr) ISysDiscoveryDo
	Having(conds ...gen.Condition) ISysDiscoveryDo
	Limit(limit int) ISysDiscoveryDo
	Offset(offset int) ISysDiscoveryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDiscoveryDo
	Unscoped() ISysDiscoveryDo
	Create(values ...*model.SysDiscovery) error
	CreateInBatches(values []*model.SysDiscovery, batchSize int) error
	Save(values ...*model.SysDiscovery) error
	First() (*model.SysDiscovery, error)
	Take() (*model.SysDiscovery, error)
	Last() (*model.SysDiscovery, error)
	Find() ([]*model.SysDiscovery, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDiscovery, err error)
	FindInBatches(result *[]*model.SysDiscovery, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDiscovery) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDiscoveryDo
	Assign(attrs ...field.AssignExpr) ISysDiscoveryDo
	Joins(fields ...field.RelationField) ISysDiscoveryDo
	Preload(fields ...field.RelationField) ISysDiscoveryDo
	FirstOrInit() (*model.SysDiscovery, error)
	FirstOrCreate() (*model.SysDiscovery, error)
	FindByPage(offset int, limit int) (result []*model.SysDiscovery, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDiscoveryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDiscoveryDo) Debug() ISysDiscoveryDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDiscoveryDo) WithContext(ctx context.Context) ISysDiscoveryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDiscoveryDo) ReadDB() ISysDiscoveryDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDiscoveryDo) WriteDB() ISysDiscoveryDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDiscoveryDo) Session(config *gorm.Session) ISysDiscoveryDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDiscoveryDo) Clauses(conds ...clause.Expression) ISysDiscoveryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDiscoveryDo) Returning(value interface{}, columns ...string) ISysDiscoveryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDiscoveryDo) Not(conds ...gen.Condition) ISysDiscoveryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDiscoveryDo) Or(conds ...gen.Condition) ISysDiscoveryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDiscoveryDo) Select(conds ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDiscoveryDo) Where(conds ...gen.Condition) ISysDiscoveryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDiscoveryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysDiscoveryDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysDiscoveryDo) Order(conds ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDiscoveryDo) Distinct(cols ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDiscoveryDo) Omit(cols ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDiscoveryDo) Join(table schema.Tabler, on ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDiscoveryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDiscoveryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDiscoveryDo) Group(cols ...field.Expr) ISysDiscoveryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDiscoveryDo) Having(conds ...gen.Condition) ISysDiscoveryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDiscoveryDo) Limit(limit int) ISysDiscoveryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDiscoveryDo) Offset(offset int) ISysDiscoveryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDiscoveryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDiscoveryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDiscoveryDo) Unscoped() ISysDiscoveryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDiscoveryDo) Create(values ...*model.SysDiscovery) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDiscoveryDo) CreateInBatches(values []*model.SysDiscovery, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDiscoveryDo) Save(values ...*model.SysDiscovery) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDiscoveryDo) First() (*model.SysDiscovery, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDiscovery), nil
	}
}

func (s sysDiscoveryDo) Take() (*model.SysDiscovery, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDiscovery), nil
	}
}

func (s sysDiscoveryDo) Last() (*model.SysDiscovery, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDiscovery), nil
	}
}

func (s sysDiscoveryDo) Find() ([]*model.SysDiscovery, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDiscovery), err
}

func (s sysDiscoveryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDiscovery, err error) {
	buf := make([]*model.SysDiscovery, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDiscoveryDo) FindInBatches(result *[]*model.SysDiscovery, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDiscoveryDo) Attrs(attrs ...field.AssignExpr) ISysDiscoveryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDiscoveryDo) Assign(attrs ...field.AssignExpr) ISysDiscoveryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDiscoveryDo) Joins(fields ...field.RelationField) ISysDiscoveryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDiscoveryDo) Preload(fields ...field.RelationField) ISysDiscoveryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDiscoveryDo) FirstOrInit() (*model.SysDiscovery, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDiscovery), nil
	}
}

func (s sysDiscoveryDo) FirstOrCreate() (*model.SysDiscovery, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDiscovery), nil
	}
}

func (s sysDiscoveryDo) FindByPage(offset int, limit int) (result []*model.SysDiscovery, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDiscoveryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDiscoveryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDiscoveryDo) Delete(models ...*model.SysDiscovery) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDiscoveryDo) withDO(do gen.Dao) *sysDiscoveryDo {
	s.DO = *do.(*gen.DO)
	return s
}
