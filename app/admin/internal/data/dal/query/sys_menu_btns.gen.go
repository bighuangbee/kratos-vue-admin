// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bighuangbee/kratos-vue-admin/app/admin/internal/data/dal/model"
)

func newSysMenuBtn(db *gorm.DB, opts ...gen.DOOption) sysMenuBtn {
	_sysMenuBtn := sysMenuBtn{}

	_sysMenuBtn.sysMenuBtnDo.UseDB(db, opts...)
	_sysMenuBtn.sysMenuBtnDo.UseModel(&model.SysMenuBtn{})

	tableName := _sysMenuBtn.sysMenuBtnDo.TableName()
	_sysMenuBtn.ALL = field.NewAsterisk(tableName)
	_sysMenuBtn.ID = field.NewInt64(tableName, "id")
	_sysMenuBtn.MenuID = field.NewInt64(tableName, "menu_id")
	_sysMenuBtn.Name = field.NewString(tableName, "name")
	_sysMenuBtn.Desc = field.NewString(tableName, "desc")

	_sysMenuBtn.fillFieldMap()

	return _sysMenuBtn
}

type sysMenuBtn struct {
	sysMenuBtnDo

	ALL    field.Asterisk
	ID     field.Int64  // 主键id
	MenuID field.Int64  // 菜单ID
	Name   field.String // 按钮关键key
	Desc   field.String // 按钮描述

	fieldMap map[string]field.Expr
}

func (s sysMenuBtn) Table(newTableName string) *sysMenuBtn {
	s.sysMenuBtnDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenuBtn) As(alias string) *sysMenuBtn {
	s.sysMenuBtnDo.DO = *(s.sysMenuBtnDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenuBtn) updateTableName(table string) *sysMenuBtn {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MenuID = field.NewInt64(table, "menu_id")
	s.Name = field.NewString(table, "name")
	s.Desc = field.NewString(table, "desc")

	s.fillFieldMap()

	return s
}

func (s *sysMenuBtn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenuBtn) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["menu_id"] = s.MenuID
	s.fieldMap["name"] = s.Name
	s.fieldMap["desc"] = s.Desc
}

func (s sysMenuBtn) clone(db *gorm.DB) sysMenuBtn {
	s.sysMenuBtnDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysMenuBtn) replaceDB(db *gorm.DB) sysMenuBtn {
	s.sysMenuBtnDo.ReplaceDB(db)
	return s
}

type sysMenuBtnDo struct{ gen.DO }

type ISysMenuBtnDo interface {
	gen.SubQuery
	Debug() ISysMenuBtnDo
	WithContext(ctx context.Context) ISysMenuBtnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuBtnDo
	WriteDB() ISysMenuBtnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuBtnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuBtnDo
	Not(conds ...gen.Condition) ISysMenuBtnDo
	Or(conds ...gen.Condition) ISysMenuBtnDo
	Select(conds ...field.Expr) ISysMenuBtnDo
	Where(conds ...gen.Condition) ISysMenuBtnDo
	Order(conds ...field.Expr) ISysMenuBtnDo
	Distinct(cols ...field.Expr) ISysMenuBtnDo
	Omit(cols ...field.Expr) ISysMenuBtnDo
	Join(table schema.Tabler, on ...field.Expr) ISysMenuBtnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuBtnDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuBtnDo
	Group(cols ...field.Expr) ISysMenuBtnDo
	Having(conds ...gen.Condition) ISysMenuBtnDo
	Limit(limit int) ISysMenuBtnDo
	Offset(offset int) ISysMenuBtnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuBtnDo
	Unscoped() ISysMenuBtnDo
	Create(values ...*model.SysMenuBtn) error
	CreateInBatches(values []*model.SysMenuBtn, batchSize int) error
	Save(values ...*model.SysMenuBtn) error
	First() (*model.SysMenuBtn, error)
	Take() (*model.SysMenuBtn, error)
	Last() (*model.SysMenuBtn, error)
	Find() ([]*model.SysMenuBtn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuBtn, err error)
	FindInBatches(result *[]*model.SysMenuBtn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysMenuBtn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuBtnDo
	Assign(attrs ...field.AssignExpr) ISysMenuBtnDo
	Joins(fields ...field.RelationField) ISysMenuBtnDo
	Preload(fields ...field.RelationField) ISysMenuBtnDo
	FirstOrInit() (*model.SysMenuBtn, error)
	FirstOrCreate() (*model.SysMenuBtn, error)
	FindByPage(offset int, limit int) (result []*model.SysMenuBtn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuBtnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuBtnDo) Debug() ISysMenuBtnDo {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuBtnDo) WithContext(ctx context.Context) ISysMenuBtnDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuBtnDo) ReadDB() ISysMenuBtnDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuBtnDo) WriteDB() ISysMenuBtnDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuBtnDo) Session(config *gorm.Session) ISysMenuBtnDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuBtnDo) Clauses(conds ...clause.Expression) ISysMenuBtnDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuBtnDo) Returning(value interface{}, columns ...string) ISysMenuBtnDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuBtnDo) Not(conds ...gen.Condition) ISysMenuBtnDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuBtnDo) Or(conds ...gen.Condition) ISysMenuBtnDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuBtnDo) Select(conds ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuBtnDo) Where(conds ...gen.Condition) ISysMenuBtnDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuBtnDo) Order(conds ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuBtnDo) Distinct(cols ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuBtnDo) Omit(cols ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuBtnDo) Join(table schema.Tabler, on ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuBtnDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuBtnDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuBtnDo) Group(cols ...field.Expr) ISysMenuBtnDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuBtnDo) Having(conds ...gen.Condition) ISysMenuBtnDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuBtnDo) Limit(limit int) ISysMenuBtnDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuBtnDo) Offset(offset int) ISysMenuBtnDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuBtnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuBtnDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuBtnDo) Unscoped() ISysMenuBtnDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuBtnDo) Create(values ...*model.SysMenuBtn) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuBtnDo) CreateInBatches(values []*model.SysMenuBtn, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuBtnDo) Save(values ...*model.SysMenuBtn) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuBtnDo) First() (*model.SysMenuBtn, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuBtn), nil
	}
}

func (s sysMenuBtnDo) Take() (*model.SysMenuBtn, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuBtn), nil
	}
}

func (s sysMenuBtnDo) Last() (*model.SysMenuBtn, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuBtn), nil
	}
}

func (s sysMenuBtnDo) Find() ([]*model.SysMenuBtn, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysMenuBtn), err
}

func (s sysMenuBtnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuBtn, err error) {
	buf := make([]*model.SysMenuBtn, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuBtnDo) FindInBatches(result *[]*model.SysMenuBtn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuBtnDo) Attrs(attrs ...field.AssignExpr) ISysMenuBtnDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuBtnDo) Assign(attrs ...field.AssignExpr) ISysMenuBtnDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuBtnDo) Joins(fields ...field.RelationField) ISysMenuBtnDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuBtnDo) Preload(fields ...field.RelationField) ISysMenuBtnDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuBtnDo) FirstOrInit() (*model.SysMenuBtn, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuBtn), nil
	}
}

func (s sysMenuBtnDo) FirstOrCreate() (*model.SysMenuBtn, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuBtn), nil
	}
}

func (s sysMenuBtnDo) FindByPage(offset int, limit int) (result []*model.SysMenuBtn, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuBtnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuBtnDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuBtnDo) Delete(models ...*model.SysMenuBtn) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuBtnDo) withDO(do gen.Dao) *sysMenuBtnDo {
	s.DO = *do.(*gen.DO)
	return s
}
